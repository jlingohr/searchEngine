http://www.cs.dartmouth.edu/~campbell/cs50/ccontinued.html
Depth: 2
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title></title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<meta name="originator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<!-- html --> 
<meta name="src" content="ccontinued.tex"> 
<meta name="date" content="2014-01-23 11:05:00"> 
<link rel="stylesheet" type="text/css" href="ccontinued.css"> 
</head><body 
>
<h1 class="likepartHead"><a 
 id="x1-1000"></a>CS 50 Software Design and Implementation</h1>
<h1 class="likepartHead"><a 
 id="x1-2000"></a>Lecture 6</h1>
<h1 class="likepartHead"><a 
 id="x1-3000"></a>C Continued: Preprocessor, Functions, Data Structures, Arrays, and Strings</h1>
<!--l. 21--><p class="noindent" >In this lecture we continue our introduction to the C langauge.
<h3 class="likesectionHead"><a 
 id="x1-4000"></a>Goals</h3>
<!--l. 25--><p class="noindent" >We plan to learn the following from today&#8217;s lecture:
     <ul class="itemize1">
     <li class="itemize">The C preprocessor
     </li>
     <li class="itemize">Functions
     </li>
     <li class="itemize">Data structures
     </li>
     <li class="itemize">Character arrays and strings</li></ul>
<!--l. 34--><p class="noindent" >OK. Let&#8217;s get started.
<!--l. 37--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-5000"></a>The C preprocessor</h3>
<!--l. 39--><p class="noindent" >You will notice that a few lines, typically near the beginning of a C program, begin with the hash or
pound sign, #. These lines are termed C preprocessor directives and are actually instructions (directives)
to a special program called the C preprocessor (located in /lib/cpp). As its name suggests, the C
preprocessor processes the text of a C program before the C compiler sees it. The preprocessor directives
(all beginning with #) should begin in column 1 (the 1st column) of any source line on which they
appear.
                                                                                  
                                                                                  
<!--l. 46--><p class="noindent" >The C preprocessor is easily able to locate these lines and then examine the characters following the #.
The following characters usually form a special word in the C preprocessors syntax which typically cause
the preprocessor to modify the C program before it is sent to the C compiler itself. Although there are
about 20 different preprocessor directives, well only discuss the most common one here and then a few
others as we need them.
<!--l. 52--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-6000"></a>Header file inclusion</h3>
<!--l. 54--><p class="noindent" >The #include directive, pronounced hash include, typically appears at the beginning of a
C program. It is used to textually include the entire contents of another file at the point of
the #include directive. A common #include directive, seen at the beginning of most C files
is
<div 
class="colorbox" id="colorbox1"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /></div>                                                                 </div>
<!--l. 69--><p class="noindent" >This directive indicates that the contents of the file named stdio.h should be included at this point (the
directive is replaced with the contents). There is no limit to the number of lines that may be included with
this directive and, in fact, the contents of the included file may have further #include directives which are
handled in the same way. We say that the inclusions are nested and, of course, care should be taken to
avoid recursive nestings!
<!--l. 75--><p class="noindent" >The example using <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;stdio.h&#x003E;</span></span></span>, above, demonstrates two important points. The filename itself appears
between the characters <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span>. The use of these characters indicates that the enclosed filename
should be found in the standard include directory, <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span>. The required file is then
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include/stdio.h</span></span></span>.
<!--l. 79--><p class="noindent" >The standard include files are used to consistently provide system-wide data structures or declarations
that are required in many different files. By having the standard include files centrally located and
globally available, all C programmers are guaranteed of using the same data structures and
declarations that they (all) require. C99 only defines 15 operating system independent header
files.
<!--l. 84--><p class="noindent" >Have a (recursive) look in the /usr/include directory yourself and you see that there are over 2000
standard include files available under LINUX!
<!--l. 87--><p class="noindent" >Importantly, it is the use of the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span> characters which signify that the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span> directory name
should be prepended to the filename to locate the required file. Alternatively, the &#8220; ... &#8221; characters may
also be used, as in the following example:
<div 
class="colorbox" id="colorbox2"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;"mystructures.h"</span><br /><br /></div>                                                          </div>
<!--l. 101--><p class="noindent" >to include the contents of the file mystructures.h at the correct point in the C program. Because the &#8220; ...&#8221;
characters are used, the file is sought in the present working directory, that is <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">./mystructures.h</span></span></span>. By
using the &#8220; ...&#8221; characters we can specify our own include files which are located in the same directory as
the C source programs themselves.
                                                                                  
                                                                                  
<!--l. 106--><p class="noindent" >In both of the above examples the indicated filename had the &#8220;extension&#8221; of .h. Whereas we have
previously said that the extension of .c is expected by the C compiler, the use of .h is only a convention
within UNIX. The .h indicates that the file is a header file, because they generally contain information
required at the head (beginning) of a C program. Header files typically (and should) contain
only declarations of C constructs, like data structures and constants used throughout the C
program. In particular, they should not contain any executable code, variable definitions, nor C
statements.
<!--l. 113--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-7000"></a>Defining textual constants</h3>
<!--l. 115--><p class="noindent" >Another frequently used C preprocessor directive is the #define directive, pronounced hash define. The
#define directive is used to introduce a textual value, or textual constant, which when recognized by the C
preprocessor will be textually substituted by its definition. Traditionally #define directives were the only
method available to C programmers, using old K&amp;R (Brian Kernighan and Dennis Ritchie) C,
of introducing constants in C programs. For example, frequently used #define-ed constants
are:
<div 
class="colorbox" id="colorbox3"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;FRESHMAN</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SOPHOMORE</span><span 
class="cmtt-10">&#x00A0;2</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;JUNIOR</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SENIOR</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /></div>              </div>
<!--l. 136--><p class="noindent" >After these definitions, each time the C preprocessor locates the sequence JUNIOR as a complete word
within the C program, it will be substituted for the character sequence 3. Although the new ANSI-C
standard has introduced a formal const construct for supporting constants, the #define directive is still
the preferred method of defining some forms of constants. For example, when defining an array of integers
(described in greater detail later) we use a #define directive to define the maximum size of the
array.
<!--l. 142--><p class="noindent" >Thereafter we use the #define-ed constant in the array definition:
<div 
class="colorbox" id="colorbox4"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><span 
class="cmtt-10">&#x00A0;100</span><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;myarray[MAXSIZE];</span><br /><br /></div>                                           </div>
<!--l. 156--><p class="noindent" >If necessary, a preprocessor token may be undefined is no longer required:
<div 
class="colorbox" id="colorbox5"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#undef</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><br /><br /></div>                                                                     </div>
<!--l. 169--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-8000"></a>Textual, inline functions</h3>
<!--l. 171--><p class="noindent" >The #define directive may also be used to define some inline functions, more correctly termed macros,
within your C programs. An often cited example is:
<div 
class="colorbox" id="colorbox6"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;x</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;x</span><br /><br /></div>                                                               </div>
<!--l. 186--><p class="noindent" >C does not have a standard function for calculating the square of, say, an integer value, but using the
inline macro defined above, we can now write:
                                                                                  
                                                                                  
<div 
class="colorbox" id="colorbox7"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(i);</span><br /><br /></div>                                                                   </div>
<!--l. 200--><p class="noindent" >where i is an integer variable. Notice that the macro substitution was performed with the macros
argument being i. In a manner akin to actual and formal parameter naming in Java (and C), the actual
parameter i is represented in the macro as the formal parameter x without problems. Each time x appears
as a unique &#8220;word&#8221; in the right-hand-side of the definition, it will be replaced in the C code by
i.
<!--l. 205--><p class="noindent" >Notice that this textual substitution may also be used for calculating (in this example) the square of an
integer constant. For example:
<div 
class="colorbox" id="colorbox8"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(3);</span><br /><br /></div>                                                                   </div>
<!--l. 219--><p class="noindent" >is expanded in an identical way. Our definition of sqr is not really rigourous enough to provide correct
results in all cases. For example, consider the &#8220;call&#8221; to sqr(x+1) which would evaluate to 2x+1! A more
correct definition would be:
<div 
class="colorbox" id="colorbox9"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;((x)</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;(x))</span><br /><br /></div>                                                         </div>
<!--l. 234--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-9000"></a>Conditional compilation</h3>
<!--l. 236--><p class="noindent" >Another often used feature of the C preprocessor is the use of conditional compilation directives. The C
compile pre-defines a few constants to &#8220;tell&#8221; the program the operating system in use, filename being
compiled, and so on:
<div 
class="colorbox" id="colorbox10"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#if</span><span 
class="cmtt-10">&#x00A0;defined(linux)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;LINUX</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(WIN32)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Windows</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(sun)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Suns</span><span 
class="cmtt-10">&#x00A0;Solaris</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#endif</span><br /><br /></div></div>
<!--l. 261--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-10000"></a>Functions</h3>
<!--l. 263--><p class="noindent" >Java supports constructors and methods which allocate instances of, and interrogate and modify the state
of, their own (implicit) objects. Constructors and methods are typically directed by their parameters. C
is a procedural programming language, meaning that its primary synchronous control flow
mechanism is the function call. Strictly speaking, C has no procedures, but instead has functions,
all of which return a single instance of a base or user-defined type. Cs functions access and
modify the global memory, and (possibly) their parameters. Although we may hope that a
function can only modify memory that it can &#8220;see&#8221; (through Cs scoping rules) or has been
provided (through its parameter list), this is untrue. By stating that there are only functions,
we are noting that all functions must return a value. While nearly true, C also has a <span 
class="cmbx-10">void</span>
type, difficult to describe, and often used as a place holder (to keep the compiler happy!). We
may think of a procedure in C, as a function that returns a <span 
class="cmbx-10">void</span>; that is to day, nothing is
returned. With a similar thought, we will often invoke a function, but have no use for its return
value. For example, a function such as printf() will return an integer as its result, but we
                                                                                  
                                                                                  
rarely need to use this integer. We can &#8220;cast its value&#8221; to <span 
class="cmbx-10">void</span>, effectively throwing away the
value.
<div 
class="colorbox" id="colorbox11"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">printf(</span><span 
class="cmtt-10">&#x00A0;....</span><span 
class="cmtt-10">&#x00A0;);</span><br /><br /></div>                                                                    </div>
<!--l. 288--><p class="noindent" >The default return datatype of a function is <span 
class="cmbx-10">int  </span>if a functions datatype is omitted, the compiler assumes
it to be an int. This has the unpleasant result, that if an external or yet to be defined functions
prototype is omitted, the compile will often silently assume an <span 
class="cmbx-10">int </span>return result. This is a
frequent cause of problems, particularly when dealing with functions returning floating point
values, as in Cs mathematics library. The use of gccs -pedantic switch allows us to trap such
errors.
<!--l. 294--><p class="noindent" >Every complete C program has an entry point named main, at which it appears the operating system calls
the program. Function main is of type <span 
class="cmbx-10">int  </span>this <span 
class="cmbx-10">int </span>is returned as the result of execution of the
whole program, with 0 indicating a successful execution, anything non-zero otherwise. Cs
functions may receive zero or more parameters. All parameters to Cs functions are passed by
value.
<!--l. 299--><p class="noindent" >Other than within a single file, the datatype of function parameters between the functions definition and
invocation is not checked, i.e. C provides no link-time cross file type checking. Perhaps surprisingly, C also
permits functions to receive a variable number of parameters. At run-time it is the functions responsibility
to deal with the data types received, and the compiler cannot perform any type checking on these
parameters.
<!--l. 305--><p class="noindent" >Function parameters are implicitly promoted to &#8220;higher&#8221; datatypes by the compiler  <span 
class="cmbx-10">char</span>s are promoted
to <span 
class="cmbx-10">int</span>s, and <span 
class="cmbx-10">float</span>s are promoted to <span 
class="cmbx-10">double</span>s.
<!--l. 308--><p class="noindent" >The following example code used functions. The code toss.c asks the use to enter the number of fair toss of
a coin and then computes the number of heads and tails. Random number generators are
used.
<!--l. 310--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/toss.c" > toss.c </a>
<!--l. 312--><p class="noindent" >The contents of toss.c looks like this:
<div 
class="colorbox" id="colorbox12"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;toss.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;user</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;computes</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;them</span><span 
class="cmtt-10">&#x00A0;out.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Input:</span><span 
class="cmtt-10">&#x00A0;User</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tosses</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Ouput:</span><span 
class="cmtt-10">&#x00A0;Displays</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;6.9</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;313</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;preprocessor</span><span 
class="cmtt-10">&#x00A0;include</span><span 
class="cmtt-10">&#x00A0;files</span><span 
class="cmtt-10">&#x00A0;found</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;/usr/include/</span><span 
class="cmtt-10">&#x00A0;directory</span><span 
class="cmtt-10">&#x00A0;*</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;printf()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;scanf()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;srand()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;rand()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;time.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;times</span><span 
class="cmtt-10">&#x00A0;(which</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;input)</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;returns</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;therefore</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;can</span><span 
class="cmtt-10">&#x00A0;be</span><span 
class="cmtt-10">&#x00A0;computed</span><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;prototpe</span><span 
class="cmtt-10">&#x00A0;declarations</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;);</span><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;,</span><span 
class="cmtt-10">&#x00A0;int);</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numHeads;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Generate</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;first</span><span 
class="cmtt-10">&#x00A0;seed</span><span 
class="cmtt-10">&#x00A0;value.</span><span 
class="cmtt-10">&#x00A0;A</span><span 
class="cmtt-10">&#x00A0;NULL</span><span 
class="cmtt-10">&#x00A0;arguments</span><span 
class="cmtt-10">&#x00A0;forces</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;read</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;computer&#8217;s</span><span 
class="cmtt-10">&#x00A0;internal</span><span 
class="cmtt-10">&#x00A0;time</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;seconds.</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;srand</span><span 
class="cmtt-10">&#x00A0;then</span><span 
class="cmtt-10">&#x00A0;uses</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;value</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;initialize</span><span 
class="cmtt-10">&#x00A0;rand()</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;srand(time(NULL));</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("How</span><span 
class="cmtt-10">&#x00A0;many</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;shall</span><span 
class="cmtt-10">&#x00A0;we</span><span 
class="cmtt-10">&#x00A0;do?</span><span 
class="cmtt-10">&#x00A0;Please</span><span 
class="cmtt-10">&#x00A0;enter:</span><span 
class="cmtt-10">&#x00A0;");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;scanf("%d",</span><span 
class="cmtt-10">&#x00A0;&amp;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("Ok,</span><span 
class="cmtt-10">&#x00A0;you</span><span 
class="cmtt-10">&#x00A0;entered</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tosses,</span><span 
class="cmtt-10">&#x00A0;so</span><span 
class="cmtt-10">&#x00A0;we&#8217;d</span><span 
class="cmtt-10">&#x00A0;expect</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tails\n",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numTosses/2,</span><span 
class="cmtt-10">&#x00A0;numTosses/2);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numHeads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;tossCoin(numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printStats(numHeads,</span><span 
class="cmtt-10">&#x00A0;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;printStats</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;tosses)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("The</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;%d,</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;(tosses-heads));</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;tossCoin</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;tosses){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i=1;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;tosses;</span><span 
class="cmtt-10">&#x00A0;i++)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;((1</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;(rand()%100))</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;50)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;heads++;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(heads);</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 409--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-11000"></a>Data structures</h3>
<!--l. 411--><p class="noindent" >C has no equivalent construct to the Java class. Instead, C provides two aggregate data structures  arrays
and structures.
<!--l. 414--><p class="noindent" >Arrays in C are not objects, nor strictly single variables. Instead, an arrays name is the name referring to
the first memory address of a contiguous block of memory of the requested length. Arrays may be declared
or defined wherever scalar variables are declared or defined  arrays may be either arrays of Cs base types
or user-defined types.
                                                                                  
                                                                                  
<!--l. 419--><p class="noindent" >There is no array keyword in C, and no bounds checking at run-time. C array subscripts commence at 0,
the highest valid subscript of <span 
class="cmbx-10">int </span>a[N] thus being N-1.
<!--l. 422--><p class="noindent" >One dimensional arrays defined with (for example) <span 
class="cmbx-10">int </span>score[20]; <br 
class="newline" />
<!--l. 424--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> declare score as array of 20 int <br 
class="newline" />
<div 
class="colorbox" id="colorbox13"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;score[20];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;20</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div>  </div>
<!--l. 441--><p class="noindent" >Multi-dimesntional arrays?
<!--l. 443--><p class="noindent" >Strictly speaking, C does not support multi-dimensional arrays. However, if all (one-dimensional) arrays in
C are considered as vectors, then multi-dimensional arrays are simply understood as &#8220;vectors of
vectors&#8221;.
<!--l. 445--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> explain char str[10][20] <br 
class="newline" />
<!--l. 447--><p class="noindent" >declare str as array of 10 array of 20 char <br 
class="newline" />The number of elements of an array can be determined with :<br 
class="newline" />
<div 
class="colorbox" id="colorbox14"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#define</span><span 
class="cmtt-10">&#x00A0;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;(sizeof(score)</span><span 
class="cmtt-10">&#x00A0;/</span><span 
class="cmtt-10">&#x00A0;sizeof(score[0]))</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div></div>
<!--l. 464--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-12000"></a>User-defined C Structures</h3>
<!--l. 465--><p class="noindent" >Structures in C are aggregate datatypes consisting of fields or members of base types, or other
user-defined types. C structures may not include executable code, unlink methods in Java
classes.
<div 
class="colorbox" id="colorbox15"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;name[20];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;addr[80];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;age;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;p1,</span><span 
class="cmtt-10">&#x00A0;p2;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;ages;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;p1.age</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;p2.age;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;sum</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;their</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if(strcmp(p1.name,</span><span 
class="cmtt-10">&#x00A0;p2.name)</span><span 
class="cmtt-10">&#x00A0;==</span><span 
class="cmtt-10">&#x00A0;0)</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;do</span><span 
class="cmtt-10">&#x00A0;they</span><span 
class="cmtt-10">&#x00A0;have</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;same</span><span 
class="cmtt-10">&#x00A0;name?</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /></div></div>
<!--l. 490--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-13000"></a>Character arrays and strings</h3>
<!--l. 492--><p class="noindent" >C provides no base type that is a string, though the C compiler accepts the use of double quoted character
string literals and does the obvious thing. A string in C is a sequence of characters (bytes) in contiguous
memory locations. The string is terminated by the sentinel value of the NULL character (zero byte). When
a C compiler detects a string literal in a program, it will allocate enough contiguous global
(read-only) memory to hold the characters of the string (including the NULL byte at the
end).
                                                                                  
                                                                                  
<!--l. 498--><p class="noindent" >C does not record the length of a string anywhere (as does Java). Instead, by convention, the length of a
string is defined as the number of characters from the beginning of the string (its starting address) up to,
but not including, the NULL byte. The length of &#8220;hello&#8221; is 5.
<!--l. 502--><p class="noindent" >Arrays of characters are typically used to store character strings. Notice that the parameter to
the following function does not indicate any expected (maximum) size, or &#8220;length&#8221;, of the
array.
<div 
class="colorbox" id="colorbox16"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;my_strlen(char</span><span 
class="cmtt-10">&#x00A0;str[])</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;len</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;while(</span><span 
class="cmtt-10">&#x00A0;str[i]</span><span 
class="cmtt-10">&#x00A0;!=</span><span 
class="cmtt-10">&#x00A0;&#8217;\0&#8217;</span><span 
class="cmtt-10">&#x00A0;)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;len++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;i++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(len);</span><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 525--><p class="noindent" >The snippet of code below include two strings that are compared. Literal strings are stored as ASCII codes
and the strng comparison strcmp compares each character&#8217;s ASCII code in making the comparison. If
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003E;</span><span 
class="cmtt-10">&#x00A0;0</span></span></span>, s1 = s2 then the return =
0.
<!--l. 527--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/string.c" > string.c </a>
<!--l. 529--><p class="noindent" >The contents of string.c looks like this:
<div 
class="colorbox" id="colorbox17"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;string.h&#x003E;</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main(){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;s1[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Beb",</span><span 
class="cmtt-10">&#x00A0;s2[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee",</span><span 
class="cmtt-10">&#x00A0;s3[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee";</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;cmp;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;First</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s2</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s1,</span><span 
class="cmtt-10">&#x00A0;s2);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Second</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s1</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s1);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Third</span><span 
class="cmtt-10">&#x00A0;test,</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s3</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s3);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s3,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;mygcc</span><span 
class="cmtt-10">&#x00A0;-o</span><span 
class="cmtt-10">&#x00A0;string</span><span 
class="cmtt-10">&#x00A0;string.c</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;./string</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;-3</span><br /><span 
class="cmtt-10">s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;0</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><br /><br /></div></div>
<!--l. 577--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array.c" > array.c </a>
<!--l. 579--><p class="noindent" >The contents of array.c looks like this:
<div 
class="colorbox" id="colorbox18"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;sets</span><span 
class="cmtt-10">&#x00A0;up</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;two</span><span 
class="cmtt-10">&#x00A0;demensional</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;and</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;contents</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;locaion.</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.7</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;405</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMROWS</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMCOLS</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><br /><span 
class="cmtt-10">{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i,</span><span 
class="cmtt-10">&#x00A0;j;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;val[NUMROWS][NUMCOLS]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;{</span><span 
class="cmtt-10">&#x00A0;8,16,9,52,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;3,15,27,6,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;14,25,2,10</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;explicitly</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[0][0],val[0][1],val[0][2],val[0][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[1][0],val[1][1],val[1][2],val[1][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[2][0],val[2][1],val[2][2],val[2][3]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;loop</span><span 
class="cmtt-10">&#x00A0;through</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMROWS;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;start</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;new</span><span 
class="cmtt-10">&#x00A0;line</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;row</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(j</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;j</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMCOLS;</span><span 
class="cmtt-10">&#x00A0;j++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("%2d</span><span 
class="cmtt-10">&#x00A0;",</span><span 
class="cmtt-10">&#x00A0;val[i][j]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 642--><p class="noindent" >If we run array we get the following output
<div 
class="colorbox" id="colorbox19"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;10</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;1</span><br /><br /></div></div>
<!--l. 667--><p class="noindent" >The next code snippet shows the address of an array and some of its elements. It importantly shows the
equivalence of two types of common notation in dealing with addresses and arrays, Run the code
below. Note that the <span 
class="cmbx-10">&amp; operator </span>is not used before the array name. Because an array is a
pointer constant equivalent to the address of the first storage location reserved for the array. the
expressions &#8220;numbers&#8221; and &amp;numbers[0] are equivalent. As an aside, if you wanted to pass the
address of an array in a function call you could replace &amp;numbers[0] with simply numbers.
*/
<!--l. 677--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array-address.c" > array-address.c </a>
<!--l. 679--><p class="noindent" >The contents of array-address.c looks like this:
<div 
class="colorbox" id="colorbox20"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array-address.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;various</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;related</span><span 
class="cmtt-10">&#x00A0;items</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;an</span><span 
class="cmtt-10">&#x00A0;array.</span><span 
class="cmtt-10">&#x00A0;It</span><span 
class="cmtt-10">&#x00A0;also</span><span 
class="cmtt-10">&#x00A0;shows</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;equivalence</span><span 
class="cmtt-10">&#x00A0;between</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;plain</span><span 
class="cmtt-10">&#x00A0;name</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;case</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;numbers&#8217;&#8217;</span><span 
class="cmtt-10">&#x00A0;and</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;&amp;(numbers[0])&#8217;&#8217;</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.10</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;411</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMELS</span><span 
class="cmtt-10">&#x00A0;20</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numbers[NUMELS];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[0]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%ld\n&#8217;&#8217;,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;sizeof(int));</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[5]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)numbers);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 731--><p class="noindent" >Let&#8217;s look at the output from array-address
<div 
class="colorbox" id="colorbox21"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array-address</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;4</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;bffff894</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!</span><br /><br /></div></div>
 
</body></html> 

                                                                                  


http://www.cs.dartmouth.edu/~campbell/cs50/ccontinued.html
Depth: 2
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title></title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<meta name="originator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<!-- html --> 
<meta name="src" content="ccontinued.tex"> 
<meta name="date" content="2014-01-23 11:05:00"> 
<link rel="stylesheet" type="text/css" href="ccontinued.css"> 
</head><body 
>
<h1 class="likepartHead"><a 
 id="x1-1000"></a>CS 50 Software Design and Implementation</h1>
<h1 class="likepartHead"><a 
 id="x1-2000"></a>Lecture 6</h1>
<h1 class="likepartHead"><a 
 id="x1-3000"></a>C Continued: Preprocessor, Functions, Data Structures, Arrays, and Strings</h1>
<!--l. 21--><p class="noindent" >In this lecture we continue our introduction to the C langauge.
<h3 class="likesectionHead"><a 
 id="x1-4000"></a>Goals</h3>
<!--l. 25--><p class="noindent" >We plan to learn the following from today&#8217;s lecture:
     <ul class="itemize1">
     <li class="itemize">The C preprocessor
     </li>
     <li class="itemize">Functions
     </li>
     <li class="itemize">Data structures
     </li>
     <li class="itemize">Character arrays and strings</li></ul>
<!--l. 34--><p class="noindent" >OK. Let&#8217;s get started.
<!--l. 37--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-5000"></a>The C preprocessor</h3>
<!--l. 39--><p class="noindent" >You will notice that a few lines, typically near the beginning of a C program, begin with the hash or
pound sign, #. These lines are termed C preprocessor directives and are actually instructions (directives)
to a special program called the C preprocessor (located in /lib/cpp). As its name suggests, the C
preprocessor processes the text of a C program before the C compiler sees it. The preprocessor directives
(all beginning with #) should begin in column 1 (the 1st column) of any source line on which they
appear.
                                                                                  
                                                                                  
<!--l. 46--><p class="noindent" >The C preprocessor is easily able to locate these lines and then examine the characters following the #.
The following characters usually form a special word in the C preprocessors syntax which typically cause
the preprocessor to modify the C program before it is sent to the C compiler itself. Although there are
about 20 different preprocessor directives, well only discuss the most common one here and then a few
others as we need them.
<!--l. 52--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-6000"></a>Header file inclusion</h3>
<!--l. 54--><p class="noindent" >The #include directive, pronounced hash include, typically appears at the beginning of a
C program. It is used to textually include the entire contents of another file at the point of
the #include directive. A common #include directive, seen at the beginning of most C files
is
<div 
class="colorbox" id="colorbox1"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /></div>                                                                 </div>
<!--l. 69--><p class="noindent" >This directive indicates that the contents of the file named stdio.h should be included at this point (the
directive is replaced with the contents). There is no limit to the number of lines that may be included with
this directive and, in fact, the contents of the included file may have further #include directives which are
handled in the same way. We say that the inclusions are nested and, of course, care should be taken to
avoid recursive nestings!
<!--l. 75--><p class="noindent" >The example using <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;stdio.h&#x003E;</span></span></span>, above, demonstrates two important points. The filename itself appears
between the characters <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span>. The use of these characters indicates that the enclosed filename
should be found in the standard include directory, <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span>. The required file is then
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include/stdio.h</span></span></span>.
<!--l. 79--><p class="noindent" >The standard include files are used to consistently provide system-wide data structures or declarations
that are required in many different files. By having the standard include files centrally located and
globally available, all C programmers are guaranteed of using the same data structures and
declarations that they (all) require. C99 only defines 15 operating system independent header
files.
<!--l. 84--><p class="noindent" >Have a (recursive) look in the /usr/include directory yourself and you see that there are over 2000
standard include files available under LINUX!
<!--l. 87--><p class="noindent" >Importantly, it is the use of the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span> characters which signify that the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span> directory name
should be prepended to the filename to locate the required file. Alternatively, the &#8220; ... &#8221; characters may
also be used, as in the following example:
<div 
class="colorbox" id="colorbox2"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;"mystructures.h"</span><br /><br /></div>                                                          </div>
<!--l. 101--><p class="noindent" >to include the contents of the file mystructures.h at the correct point in the C program. Because the &#8220; ...&#8221;
characters are used, the file is sought in the present working directory, that is <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">./mystructures.h</span></span></span>. By
using the &#8220; ...&#8221; characters we can specify our own include files which are located in the same directory as
the C source programs themselves.
                                                                                  
                                                                                  
<!--l. 106--><p class="noindent" >In both of the above examples the indicated filename had the &#8220;extension&#8221; of .h. Whereas we have
previously said that the extension of .c is expected by the C compiler, the use of .h is only a convention
within UNIX. The .h indicates that the file is a header file, because they generally contain information
required at the head (beginning) of a C program. Header files typically (and should) contain
only declarations of C constructs, like data structures and constants used throughout the C
program. In particular, they should not contain any executable code, variable definitions, nor C
statements.
<!--l. 113--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-7000"></a>Defining textual constants</h3>
<!--l. 115--><p class="noindent" >Another frequently used C preprocessor directive is the #define directive, pronounced hash define. The
#define directive is used to introduce a textual value, or textual constant, which when recognized by the C
preprocessor will be textually substituted by its definition. Traditionally #define directives were the only
method available to C programmers, using old K&amp;R (Brian Kernighan and Dennis Ritchie) C,
of introducing constants in C programs. For example, frequently used #define-ed constants
are:
<div 
class="colorbox" id="colorbox3"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;FRESHMAN</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SOPHOMORE</span><span 
class="cmtt-10">&#x00A0;2</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;JUNIOR</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SENIOR</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /></div>              </div>
<!--l. 136--><p class="noindent" >After these definitions, each time the C preprocessor locates the sequence JUNIOR as a complete word
within the C program, it will be substituted for the character sequence 3. Although the new ANSI-C
standard has introduced a formal const construct for supporting constants, the #define directive is still
the preferred method of defining some forms of constants. For example, when defining an array of integers
(described in greater detail later) we use a #define directive to define the maximum size of the
array.
<!--l. 142--><p class="noindent" >Thereafter we use the #define-ed constant in the array definition:
<div 
class="colorbox" id="colorbox4"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><span 
class="cmtt-10">&#x00A0;100</span><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;myarray[MAXSIZE];</span><br /><br /></div>                                           </div>
<!--l. 156--><p class="noindent" >If necessary, a preprocessor token may be undefined is no longer required:
<div 
class="colorbox" id="colorbox5"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#undef</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><br /><br /></div>                                                                     </div>
<!--l. 169--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-8000"></a>Textual, inline functions</h3>
<!--l. 171--><p class="noindent" >The #define directive may also be used to define some inline functions, more correctly termed macros,
within your C programs. An often cited example is:
<div 
class="colorbox" id="colorbox6"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;x</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;x</span><br /><br /></div>                                                               </div>
<!--l. 186--><p class="noindent" >C does not have a standard function for calculating the square of, say, an integer value, but using the
inline macro defined above, we can now write:
                                                                                  
                                                                                  
<div 
class="colorbox" id="colorbox7"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(i);</span><br /><br /></div>                                                                   </div>
<!--l. 200--><p class="noindent" >where i is an integer variable. Notice that the macro substitution was performed with the macros
argument being i. In a manner akin to actual and formal parameter naming in Java (and C), the actual
parameter i is represented in the macro as the formal parameter x without problems. Each time x appears
as a unique &#8220;word&#8221; in the right-hand-side of the definition, it will be replaced in the C code by
i.
<!--l. 205--><p class="noindent" >Notice that this textual substitution may also be used for calculating (in this example) the square of an
integer constant. For example:
<div 
class="colorbox" id="colorbox8"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(3);</span><br /><br /></div>                                                                   </div>
<!--l. 219--><p class="noindent" >is expanded in an identical way. Our definition of sqr is not really rigourous enough to provide correct
results in all cases. For example, consider the &#8220;call&#8221; to sqr(x+1) which would evaluate to 2x+1! A more
correct definition would be:
<div 
class="colorbox" id="colorbox9"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;((x)</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;(x))</span><br /><br /></div>                                                         </div>
<!--l. 234--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-9000"></a>Conditional compilation</h3>
<!--l. 236--><p class="noindent" >Another often used feature of the C preprocessor is the use of conditional compilation directives. The C
compile pre-defines a few constants to &#8220;tell&#8221; the program the operating system in use, filename being
compiled, and so on:
<div 
class="colorbox" id="colorbox10"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#if</span><span 
class="cmtt-10">&#x00A0;defined(linux)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;LINUX</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(WIN32)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Windows</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(sun)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Suns</span><span 
class="cmtt-10">&#x00A0;Solaris</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#endif</span><br /><br /></div></div>
<!--l. 261--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-10000"></a>Functions</h3>
<!--l. 263--><p class="noindent" >Java supports constructors and methods which allocate instances of, and interrogate and modify the state
of, their own (implicit) objects. Constructors and methods are typically directed by their parameters. C
is a procedural programming language, meaning that its primary synchronous control flow
mechanism is the function call. Strictly speaking, C has no procedures, but instead has functions,
all of which return a single instance of a base or user-defined type. Cs functions access and
modify the global memory, and (possibly) their parameters. Although we may hope that a
function can only modify memory that it can &#8220;see&#8221; (through Cs scoping rules) or has been
provided (through its parameter list), this is untrue. By stating that there are only functions,
we are noting that all functions must return a value. While nearly true, C also has a <span 
class="cmbx-10">void</span>
type, difficult to describe, and often used as a place holder (to keep the compiler happy!). We
may think of a procedure in C, as a function that returns a <span 
class="cmbx-10">void</span>; that is to day, nothing is
returned. With a similar thought, we will often invoke a function, but have no use for its return
value. For example, a function such as printf() will return an integer as its result, but we
                                                                                  
                                                                                  
rarely need to use this integer. We can &#8220;cast its value&#8221; to <span 
class="cmbx-10">void</span>, effectively throwing away the
value.
<div 
class="colorbox" id="colorbox11"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">printf(</span><span 
class="cmtt-10">&#x00A0;....</span><span 
class="cmtt-10">&#x00A0;);</span><br /><br /></div>                                                                    </div>
<!--l. 288--><p class="noindent" >The default return datatype of a function is <span 
class="cmbx-10">int  </span>if a functions datatype is omitted, the compiler assumes
it to be an int. This has the unpleasant result, that if an external or yet to be defined functions
prototype is omitted, the compile will often silently assume an <span 
class="cmbx-10">int </span>return result. This is a
frequent cause of problems, particularly when dealing with functions returning floating point
values, as in Cs mathematics library. The use of gccs -pedantic switch allows us to trap such
errors.
<!--l. 294--><p class="noindent" >Every complete C program has an entry point named main, at which it appears the operating system calls
the program. Function main is of type <span 
class="cmbx-10">int  </span>this <span 
class="cmbx-10">int </span>is returned as the result of execution of the
whole program, with 0 indicating a successful execution, anything non-zero otherwise. Cs
functions may receive zero or more parameters. All parameters to Cs functions are passed by
value.
<!--l. 299--><p class="noindent" >Other than within a single file, the datatype of function parameters between the functions definition and
invocation is not checked, i.e. C provides no link-time cross file type checking. Perhaps surprisingly, C also
permits functions to receive a variable number of parameters. At run-time it is the functions responsibility
to deal with the data types received, and the compiler cannot perform any type checking on these
parameters.
<!--l. 305--><p class="noindent" >Function parameters are implicitly promoted to &#8220;higher&#8221; datatypes by the compiler  <span 
class="cmbx-10">char</span>s are promoted
to <span 
class="cmbx-10">int</span>s, and <span 
class="cmbx-10">float</span>s are promoted to <span 
class="cmbx-10">double</span>s.
<!--l. 308--><p class="noindent" >The following example code used functions. The code toss.c asks the use to enter the number of fair toss of
a coin and then computes the number of heads and tails. Random number generators are
used.
<!--l. 310--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/toss.c" > toss.c </a>
<!--l. 312--><p class="noindent" >The contents of toss.c looks like this:
<div 
class="colorbox" id="colorbox12"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;toss.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;user</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;computes</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;them</span><span 
class="cmtt-10">&#x00A0;out.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Input:</span><span 
class="cmtt-10">&#x00A0;User</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tosses</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Ouput:</span><span 
class="cmtt-10">&#x00A0;Displays</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;6.9</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;313</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;preprocessor</span><span 
class="cmtt-10">&#x00A0;include</span><span 
class="cmtt-10">&#x00A0;files</span><span 
class="cmtt-10">&#x00A0;found</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;/usr/include/</span><span 
class="cmtt-10">&#x00A0;directory</span><span 
class="cmtt-10">&#x00A0;*</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;printf()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;scanf()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;srand()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;rand()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;time.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;times</span><span 
class="cmtt-10">&#x00A0;(which</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;input)</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;returns</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;therefore</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;can</span><span 
class="cmtt-10">&#x00A0;be</span><span 
class="cmtt-10">&#x00A0;computed</span><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;prototpe</span><span 
class="cmtt-10">&#x00A0;declarations</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;);</span><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;,</span><span 
class="cmtt-10">&#x00A0;int);</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numHeads;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Generate</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;first</span><span 
class="cmtt-10">&#x00A0;seed</span><span 
class="cmtt-10">&#x00A0;value.</span><span 
class="cmtt-10">&#x00A0;A</span><span 
class="cmtt-10">&#x00A0;NULL</span><span 
class="cmtt-10">&#x00A0;arguments</span><span 
class="cmtt-10">&#x00A0;forces</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;read</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;computer&#8217;s</span><span 
class="cmtt-10">&#x00A0;internal</span><span 
class="cmtt-10">&#x00A0;time</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;seconds.</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;srand</span><span 
class="cmtt-10">&#x00A0;then</span><span 
class="cmtt-10">&#x00A0;uses</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;value</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;initialize</span><span 
class="cmtt-10">&#x00A0;rand()</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;srand(time(NULL));</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("How</span><span 
class="cmtt-10">&#x00A0;many</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;shall</span><span 
class="cmtt-10">&#x00A0;we</span><span 
class="cmtt-10">&#x00A0;do?</span><span 
class="cmtt-10">&#x00A0;Please</span><span 
class="cmtt-10">&#x00A0;enter:</span><span 
class="cmtt-10">&#x00A0;");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;scanf("%d",</span><span 
class="cmtt-10">&#x00A0;&amp;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("Ok,</span><span 
class="cmtt-10">&#x00A0;you</span><span 
class="cmtt-10">&#x00A0;entered</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tosses,</span><span 
class="cmtt-10">&#x00A0;so</span><span 
class="cmtt-10">&#x00A0;we&#8217;d</span><span 
class="cmtt-10">&#x00A0;expect</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tails\n",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numTosses/2,</span><span 
class="cmtt-10">&#x00A0;numTosses/2);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numHeads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;tossCoin(numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printStats(numHeads,</span><span 
class="cmtt-10">&#x00A0;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;printStats</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;tosses)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("The</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;%d,</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;(tosses-heads));</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;tossCoin</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;tosses){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i=1;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;tosses;</span><span 
class="cmtt-10">&#x00A0;i++)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;((1</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;(rand()%100))</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;50)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;heads++;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(heads);</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 409--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-11000"></a>Data structures</h3>
<!--l. 411--><p class="noindent" >C has no equivalent construct to the Java class. Instead, C provides two aggregate data structures  arrays
and structures.
<!--l. 414--><p class="noindent" >Arrays in C are not objects, nor strictly single variables. Instead, an arrays name is the name referring to
the first memory address of a contiguous block of memory of the requested length. Arrays may be declared
or defined wherever scalar variables are declared or defined  arrays may be either arrays of Cs base types
or user-defined types.
                                                                                  
                                                                                  
<!--l. 419--><p class="noindent" >There is no array keyword in C, and no bounds checking at run-time. C array subscripts commence at 0,
the highest valid subscript of <span 
class="cmbx-10">int </span>a[N] thus being N-1.
<!--l. 422--><p class="noindent" >One dimensional arrays defined with (for example) <span 
class="cmbx-10">int </span>score[20]; <br 
class="newline" />
<!--l. 424--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> declare score as array of 20 int <br 
class="newline" />
<div 
class="colorbox" id="colorbox13"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;score[20];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;20</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div>  </div>
<!--l. 441--><p class="noindent" >Multi-dimesntional arrays?
<!--l. 443--><p class="noindent" >Strictly speaking, C does not support multi-dimensional arrays. However, if all (one-dimensional) arrays in
C are considered as vectors, then multi-dimensional arrays are simply understood as &#8220;vectors of
vectors&#8221;.
<!--l. 445--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> explain char str[10][20] <br 
class="newline" />
<!--l. 447--><p class="noindent" >declare str as array of 10 array of 20 char <br 
class="newline" />The number of elements of an array can be determined with :<br 
class="newline" />
<div 
class="colorbox" id="colorbox14"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#define</span><span 
class="cmtt-10">&#x00A0;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;(sizeof(score)</span><span 
class="cmtt-10">&#x00A0;/</span><span 
class="cmtt-10">&#x00A0;sizeof(score[0]))</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div></div>
<!--l. 464--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-12000"></a>User-defined C Structures</h3>
<!--l. 465--><p class="noindent" >Structures in C are aggregate datatypes consisting of fields or members of base types, or other
user-defined types. C structures may not include executable code, unlink methods in Java
classes.
<div 
class="colorbox" id="colorbox15"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;name[20];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;addr[80];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;age;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;p1,</span><span 
class="cmtt-10">&#x00A0;p2;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;ages;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;p1.age</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;p2.age;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;sum</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;their</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if(strcmp(p1.name,</span><span 
class="cmtt-10">&#x00A0;p2.name)</span><span 
class="cmtt-10">&#x00A0;==</span><span 
class="cmtt-10">&#x00A0;0)</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;do</span><span 
class="cmtt-10">&#x00A0;they</span><span 
class="cmtt-10">&#x00A0;have</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;same</span><span 
class="cmtt-10">&#x00A0;name?</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /></div></div>
<!--l. 490--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-13000"></a>Character arrays and strings</h3>
<!--l. 492--><p class="noindent" >C provides no base type that is a string, though the C compiler accepts the use of double quoted character
string literals and does the obvious thing. A string in C is a sequence of characters (bytes) in contiguous
memory locations. The string is terminated by the sentinel value of the NULL character (zero byte). When
a C compiler detects a string literal in a program, it will allocate enough contiguous global
(read-only) memory to hold the characters of the string (including the NULL byte at the
end).
                                                                                  
                                                                                  
<!--l. 498--><p class="noindent" >C does not record the length of a string anywhere (as does Java). Instead, by convention, the length of a
string is defined as the number of characters from the beginning of the string (its starting address) up to,
but not including, the NULL byte. The length of &#8220;hello&#8221; is 5.
<!--l. 502--><p class="noindent" >Arrays of characters are typically used to store character strings. Notice that the parameter to
the following function does not indicate any expected (maximum) size, or &#8220;length&#8221;, of the
array.
<div 
class="colorbox" id="colorbox16"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;my_strlen(char</span><span 
class="cmtt-10">&#x00A0;str[])</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;len</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;while(</span><span 
class="cmtt-10">&#x00A0;str[i]</span><span 
class="cmtt-10">&#x00A0;!=</span><span 
class="cmtt-10">&#x00A0;&#8217;\0&#8217;</span><span 
class="cmtt-10">&#x00A0;)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;len++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;i++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(len);</span><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 525--><p class="noindent" >The snippet of code below include two strings that are compared. Literal strings are stored as ASCII codes
and the strng comparison strcmp compares each character&#8217;s ASCII code in making the comparison. If
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003E;</span><span 
class="cmtt-10">&#x00A0;0</span></span></span>, s1 = s2 then the return =
0.
<!--l. 527--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/string.c" > string.c </a>
<!--l. 529--><p class="noindent" >The contents of string.c looks like this:
<div 
class="colorbox" id="colorbox17"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;string.h&#x003E;</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main(){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;s1[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Beb",</span><span 
class="cmtt-10">&#x00A0;s2[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee",</span><span 
class="cmtt-10">&#x00A0;s3[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee";</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;cmp;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;First</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s2</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s1,</span><span 
class="cmtt-10">&#x00A0;s2);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Second</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s1</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s1);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Third</span><span 
class="cmtt-10">&#x00A0;test,</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s3</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s3);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s3,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;mygcc</span><span 
class="cmtt-10">&#x00A0;-o</span><span 
class="cmtt-10">&#x00A0;string</span><span 
class="cmtt-10">&#x00A0;string.c</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;./string</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;-3</span><br /><span 
class="cmtt-10">s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;0</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><br /><br /></div></div>
<!--l. 577--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array.c" > array.c </a>
<!--l. 579--><p class="noindent" >The contents of array.c looks like this:
<div 
class="colorbox" id="colorbox18"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;sets</span><span 
class="cmtt-10">&#x00A0;up</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;two</span><span 
class="cmtt-10">&#x00A0;demensional</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;and</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;contents</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;locaion.</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.7</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;405</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMROWS</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMCOLS</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><br /><span 
class="cmtt-10">{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i,</span><span 
class="cmtt-10">&#x00A0;j;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;val[NUMROWS][NUMCOLS]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;{</span><span 
class="cmtt-10">&#x00A0;8,16,9,52,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;3,15,27,6,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;14,25,2,10</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;explicitly</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[0][0],val[0][1],val[0][2],val[0][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[1][0],val[1][1],val[1][2],val[1][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[2][0],val[2][1],val[2][2],val[2][3]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;loop</span><span 
class="cmtt-10">&#x00A0;through</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMROWS;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;start</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;new</span><span 
class="cmtt-10">&#x00A0;line</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;row</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(j</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;j</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMCOLS;</span><span 
class="cmtt-10">&#x00A0;j++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("%2d</span><span 
class="cmtt-10">&#x00A0;",</span><span 
class="cmtt-10">&#x00A0;val[i][j]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 642--><p class="noindent" >If we run array we get the following output
<div 
class="colorbox" id="colorbox19"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;10</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;1</span><br /><br /></div></div>
<!--l. 667--><p class="noindent" >The next code snippet shows the address of an array and some of its elements. It importantly shows the
equivalence of two types of common notation in dealing with addresses and arrays, Run the code
below. Note that the <span 
class="cmbx-10">&amp; operator </span>is not used before the array name. Because an array is a
pointer constant equivalent to the address of the first storage location reserved for the array. the
expressions &#8220;numbers&#8221; and &amp;numbers[0] are equivalent. As an aside, if you wanted to pass the
address of an array in a function call you could replace &amp;numbers[0] with simply numbers.
*/
<!--l. 677--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array-address.c" > array-address.c </a>
<!--l. 679--><p class="noindent" >The contents of array-address.c looks like this:
<div 
class="colorbox" id="colorbox20"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array-address.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;various</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;related</span><span 
class="cmtt-10">&#x00A0;items</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;an</span><span 
class="cmtt-10">&#x00A0;array.</span><span 
class="cmtt-10">&#x00A0;It</span><span 
class="cmtt-10">&#x00A0;also</span><span 
class="cmtt-10">&#x00A0;shows</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;equivalence</span><span 
class="cmtt-10">&#x00A0;between</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;plain</span><span 
class="cmtt-10">&#x00A0;name</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;case</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;numbers&#8217;&#8217;</span><span 
class="cmtt-10">&#x00A0;and</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;&amp;(numbers[0])&#8217;&#8217;</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.10</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;411</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMELS</span><span 
class="cmtt-10">&#x00A0;20</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numbers[NUMELS];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[0]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%ld\n&#8217;&#8217;,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;sizeof(int));</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[5]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)numbers);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 731--><p class="noindent" >Let&#8217;s look at the output from array-address
<div 
class="colorbox" id="colorbox21"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array-address</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;4</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;bffff894</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!</span><br /><br /></div></div>
 
</body></html> 

                                                                                  


http://www.cs.dartmouth.edu/~campbell/cs50/ccontinued.html
Depth: 2
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title></title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<meta name="originator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<!-- html --> 
<meta name="src" content="ccontinued.tex"> 
<meta name="date" content="2014-01-23 11:05:00"> 
<link rel="stylesheet" type="text/css" href="ccontinued.css"> 
</head><body 
>
<h1 class="likepartHead"><a 
 id="x1-1000"></a>CS 50 Software Design and Implementation</h1>
<h1 class="likepartHead"><a 
 id="x1-2000"></a>Lecture 6</h1>
<h1 class="likepartHead"><a 
 id="x1-3000"></a>C Continued: Preprocessor, Functions, Data Structures, Arrays, and Strings</h1>
<!--l. 21--><p class="noindent" >In this lecture we continue our introduction to the C langauge.
<h3 class="likesectionHead"><a 
 id="x1-4000"></a>Goals</h3>
<!--l. 25--><p class="noindent" >We plan to learn the following from today&#8217;s lecture:
     <ul class="itemize1">
     <li class="itemize">The C preprocessor
     </li>
     <li class="itemize">Functions
     </li>
     <li class="itemize">Data structures
     </li>
     <li class="itemize">Character arrays and strings</li></ul>
<!--l. 34--><p class="noindent" >OK. Let&#8217;s get started.
<!--l. 37--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-5000"></a>The C preprocessor</h3>
<!--l. 39--><p class="noindent" >You will notice that a few lines, typically near the beginning of a C program, begin with the hash or
pound sign, #. These lines are termed C preprocessor directives and are actually instructions (directives)
to a special program called the C preprocessor (located in /lib/cpp). As its name suggests, the C
preprocessor processes the text of a C program before the C compiler sees it. The preprocessor directives
(all beginning with #) should begin in column 1 (the 1st column) of any source line on which they
appear.
                                                                                  
                                                                                  
<!--l. 46--><p class="noindent" >The C preprocessor is easily able to locate these lines and then examine the characters following the #.
The following characters usually form a special word in the C preprocessors syntax which typically cause
the preprocessor to modify the C program before it is sent to the C compiler itself. Although there are
about 20 different preprocessor directives, well only discuss the most common one here and then a few
others as we need them.
<!--l. 52--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-6000"></a>Header file inclusion</h3>
<!--l. 54--><p class="noindent" >The #include directive, pronounced hash include, typically appears at the beginning of a
C program. It is used to textually include the entire contents of another file at the point of
the #include directive. A common #include directive, seen at the beginning of most C files
is
<div 
class="colorbox" id="colorbox1"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /></div>                                                                 </div>
<!--l. 69--><p class="noindent" >This directive indicates that the contents of the file named stdio.h should be included at this point (the
directive is replaced with the contents). There is no limit to the number of lines that may be included with
this directive and, in fact, the contents of the included file may have further #include directives which are
handled in the same way. We say that the inclusions are nested and, of course, care should be taken to
avoid recursive nestings!
<!--l. 75--><p class="noindent" >The example using <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;stdio.h&#x003E;</span></span></span>, above, demonstrates two important points. The filename itself appears
between the characters <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span>. The use of these characters indicates that the enclosed filename
should be found in the standard include directory, <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span>. The required file is then
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include/stdio.h</span></span></span>.
<!--l. 79--><p class="noindent" >The standard include files are used to consistently provide system-wide data structures or declarations
that are required in many different files. By having the standard include files centrally located and
globally available, all C programmers are guaranteed of using the same data structures and
declarations that they (all) require. C99 only defines 15 operating system independent header
files.
<!--l. 84--><p class="noindent" >Have a (recursive) look in the /usr/include directory yourself and you see that there are over 2000
standard include files available under LINUX!
<!--l. 87--><p class="noindent" >Importantly, it is the use of the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span> characters which signify that the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span> directory name
should be prepended to the filename to locate the required file. Alternatively, the &#8220; ... &#8221; characters may
also be used, as in the following example:
<div 
class="colorbox" id="colorbox2"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;"mystructures.h"</span><br /><br /></div>                                                          </div>
<!--l. 101--><p class="noindent" >to include the contents of the file mystructures.h at the correct point in the C program. Because the &#8220; ...&#8221;
characters are used, the file is sought in the present working directory, that is <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">./mystructures.h</span></span></span>. By
using the &#8220; ...&#8221; characters we can specify our own include files which are located in the same directory as
the C source programs themselves.
                                                                                  
                                                                                  
<!--l. 106--><p class="noindent" >In both of the above examples the indicated filename had the &#8220;extension&#8221; of .h. Whereas we have
previously said that the extension of .c is expected by the C compiler, the use of .h is only a convention
within UNIX. The .h indicates that the file is a header file, because they generally contain information
required at the head (beginning) of a C program. Header files typically (and should) contain
only declarations of C constructs, like data structures and constants used throughout the C
program. In particular, they should not contain any executable code, variable definitions, nor C
statements.
<!--l. 113--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-7000"></a>Defining textual constants</h3>
<!--l. 115--><p class="noindent" >Another frequently used C preprocessor directive is the #define directive, pronounced hash define. The
#define directive is used to introduce a textual value, or textual constant, which when recognized by the C
preprocessor will be textually substituted by its definition. Traditionally #define directives were the only
method available to C programmers, using old K&amp;R (Brian Kernighan and Dennis Ritchie) C,
of introducing constants in C programs. For example, frequently used #define-ed constants
are:
<div 
class="colorbox" id="colorbox3"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;FRESHMAN</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SOPHOMORE</span><span 
class="cmtt-10">&#x00A0;2</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;JUNIOR</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SENIOR</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /></div>              </div>
<!--l. 136--><p class="noindent" >After these definitions, each time the C preprocessor locates the sequence JUNIOR as a complete word
within the C program, it will be substituted for the character sequence 3. Although the new ANSI-C
standard has introduced a formal const construct for supporting constants, the #define directive is still
the preferred method of defining some forms of constants. For example, when defining an array of integers
(described in greater detail later) we use a #define directive to define the maximum size of the
array.
<!--l. 142--><p class="noindent" >Thereafter we use the #define-ed constant in the array definition:
<div 
class="colorbox" id="colorbox4"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><span 
class="cmtt-10">&#x00A0;100</span><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;myarray[MAXSIZE];</span><br /><br /></div>                                           </div>
<!--l. 156--><p class="noindent" >If necessary, a preprocessor token may be undefined is no longer required:
<div 
class="colorbox" id="colorbox5"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#undef</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><br /><br /></div>                                                                     </div>
<!--l. 169--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-8000"></a>Textual, inline functions</h3>
<!--l. 171--><p class="noindent" >The #define directive may also be used to define some inline functions, more correctly termed macros,
within your C programs. An often cited example is:
<div 
class="colorbox" id="colorbox6"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;x</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;x</span><br /><br /></div>                                                               </div>
<!--l. 186--><p class="noindent" >C does not have a standard function for calculating the square of, say, an integer value, but using the
inline macro defined above, we can now write:
                                                                                  
                                                                                  
<div 
class="colorbox" id="colorbox7"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(i);</span><br /><br /></div>                                                                   </div>
<!--l. 200--><p class="noindent" >where i is an integer variable. Notice that the macro substitution was performed with the macros
argument being i. In a manner akin to actual and formal parameter naming in Java (and C), the actual
parameter i is represented in the macro as the formal parameter x without problems. Each time x appears
as a unique &#8220;word&#8221; in the right-hand-side of the definition, it will be replaced in the C code by
i.
<!--l. 205--><p class="noindent" >Notice that this textual substitution may also be used for calculating (in this example) the square of an
integer constant. For example:
<div 
class="colorbox" id="colorbox8"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(3);</span><br /><br /></div>                                                                   </div>
<!--l. 219--><p class="noindent" >is expanded in an identical way. Our definition of sqr is not really rigourous enough to provide correct
results in all cases. For example, consider the &#8220;call&#8221; to sqr(x+1) which would evaluate to 2x+1! A more
correct definition would be:
<div 
class="colorbox" id="colorbox9"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;((x)</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;(x))</span><br /><br /></div>                                                         </div>
<!--l. 234--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-9000"></a>Conditional compilation</h3>
<!--l. 236--><p class="noindent" >Another often used feature of the C preprocessor is the use of conditional compilation directives. The C
compile pre-defines a few constants to &#8220;tell&#8221; the program the operating system in use, filename being
compiled, and so on:
<div 
class="colorbox" id="colorbox10"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#if</span><span 
class="cmtt-10">&#x00A0;defined(linux)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;LINUX</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(WIN32)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Windows</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(sun)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Suns</span><span 
class="cmtt-10">&#x00A0;Solaris</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#endif</span><br /><br /></div></div>
<!--l. 261--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-10000"></a>Functions</h3>
<!--l. 263--><p class="noindent" >Java supports constructors and methods which allocate instances of, and interrogate and modify the state
of, their own (implicit) objects. Constructors and methods are typically directed by their parameters. C
is a procedural programming language, meaning that its primary synchronous control flow
mechanism is the function call. Strictly speaking, C has no procedures, but instead has functions,
all of which return a single instance of a base or user-defined type. Cs functions access and
modify the global memory, and (possibly) their parameters. Although we may hope that a
function can only modify memory that it can &#8220;see&#8221; (through Cs scoping rules) or has been
provided (through its parameter list), this is untrue. By stating that there are only functions,
we are noting that all functions must return a value. While nearly true, C also has a <span 
class="cmbx-10">void</span>
type, difficult to describe, and often used as a place holder (to keep the compiler happy!). We
may think of a procedure in C, as a function that returns a <span 
class="cmbx-10">void</span>; that is to day, nothing is
returned. With a similar thought, we will often invoke a function, but have no use for its return
value. For example, a function such as printf() will return an integer as its result, but we
                                                                                  
                                                                                  
rarely need to use this integer. We can &#8220;cast its value&#8221; to <span 
class="cmbx-10">void</span>, effectively throwing away the
value.
<div 
class="colorbox" id="colorbox11"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">printf(</span><span 
class="cmtt-10">&#x00A0;....</span><span 
class="cmtt-10">&#x00A0;);</span><br /><br /></div>                                                                    </div>
<!--l. 288--><p class="noindent" >The default return datatype of a function is <span 
class="cmbx-10">int  </span>if a functions datatype is omitted, the compiler assumes
it to be an int. This has the unpleasant result, that if an external or yet to be defined functions
prototype is omitted, the compile will often silently assume an <span 
class="cmbx-10">int </span>return result. This is a
frequent cause of problems, particularly when dealing with functions returning floating point
values, as in Cs mathematics library. The use of gccs -pedantic switch allows us to trap such
errors.
<!--l. 294--><p class="noindent" >Every complete C program has an entry point named main, at which it appears the operating system calls
the program. Function main is of type <span 
class="cmbx-10">int  </span>this <span 
class="cmbx-10">int </span>is returned as the result of execution of the
whole program, with 0 indicating a successful execution, anything non-zero otherwise. Cs
functions may receive zero or more parameters. All parameters to Cs functions are passed by
value.
<!--l. 299--><p class="noindent" >Other than within a single file, the datatype of function parameters between the functions definition and
invocation is not checked, i.e. C provides no link-time cross file type checking. Perhaps surprisingly, C also
permits functions to receive a variable number of parameters. At run-time it is the functions responsibility
to deal with the data types received, and the compiler cannot perform any type checking on these
parameters.
<!--l. 305--><p class="noindent" >Function parameters are implicitly promoted to &#8220;higher&#8221; datatypes by the compiler  <span 
class="cmbx-10">char</span>s are promoted
to <span 
class="cmbx-10">int</span>s, and <span 
class="cmbx-10">float</span>s are promoted to <span 
class="cmbx-10">double</span>s.
<!--l. 308--><p class="noindent" >The following example code used functions. The code toss.c asks the use to enter the number of fair toss of
a coin and then computes the number of heads and tails. Random number generators are
used.
<!--l. 310--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/toss.c" > toss.c </a>
<!--l. 312--><p class="noindent" >The contents of toss.c looks like this:
<div 
class="colorbox" id="colorbox12"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;toss.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;user</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;computes</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;them</span><span 
class="cmtt-10">&#x00A0;out.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Input:</span><span 
class="cmtt-10">&#x00A0;User</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tosses</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Ouput:</span><span 
class="cmtt-10">&#x00A0;Displays</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;6.9</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;313</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;preprocessor</span><span 
class="cmtt-10">&#x00A0;include</span><span 
class="cmtt-10">&#x00A0;files</span><span 
class="cmtt-10">&#x00A0;found</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;/usr/include/</span><span 
class="cmtt-10">&#x00A0;directory</span><span 
class="cmtt-10">&#x00A0;*</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;printf()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;scanf()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;srand()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;rand()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;time.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;times</span><span 
class="cmtt-10">&#x00A0;(which</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;input)</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;returns</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;therefore</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;can</span><span 
class="cmtt-10">&#x00A0;be</span><span 
class="cmtt-10">&#x00A0;computed</span><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;prototpe</span><span 
class="cmtt-10">&#x00A0;declarations</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;);</span><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;,</span><span 
class="cmtt-10">&#x00A0;int);</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numHeads;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Generate</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;first</span><span 
class="cmtt-10">&#x00A0;seed</span><span 
class="cmtt-10">&#x00A0;value.</span><span 
class="cmtt-10">&#x00A0;A</span><span 
class="cmtt-10">&#x00A0;NULL</span><span 
class="cmtt-10">&#x00A0;arguments</span><span 
class="cmtt-10">&#x00A0;forces</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;read</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;computer&#8217;s</span><span 
class="cmtt-10">&#x00A0;internal</span><span 
class="cmtt-10">&#x00A0;time</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;seconds.</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;srand</span><span 
class="cmtt-10">&#x00A0;then</span><span 
class="cmtt-10">&#x00A0;uses</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;value</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;initialize</span><span 
class="cmtt-10">&#x00A0;rand()</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;srand(time(NULL));</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("How</span><span 
class="cmtt-10">&#x00A0;many</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;shall</span><span 
class="cmtt-10">&#x00A0;we</span><span 
class="cmtt-10">&#x00A0;do?</span><span 
class="cmtt-10">&#x00A0;Please</span><span 
class="cmtt-10">&#x00A0;enter:</span><span 
class="cmtt-10">&#x00A0;");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;scanf("%d",</span><span 
class="cmtt-10">&#x00A0;&amp;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("Ok,</span><span 
class="cmtt-10">&#x00A0;you</span><span 
class="cmtt-10">&#x00A0;entered</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tosses,</span><span 
class="cmtt-10">&#x00A0;so</span><span 
class="cmtt-10">&#x00A0;we&#8217;d</span><span 
class="cmtt-10">&#x00A0;expect</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tails\n",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numTosses/2,</span><span 
class="cmtt-10">&#x00A0;numTosses/2);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numHeads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;tossCoin(numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printStats(numHeads,</span><span 
class="cmtt-10">&#x00A0;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;printStats</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;tosses)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("The</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;%d,</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;(tosses-heads));</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;tossCoin</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;tosses){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i=1;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;tosses;</span><span 
class="cmtt-10">&#x00A0;i++)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;((1</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;(rand()%100))</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;50)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;heads++;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(heads);</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 409--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-11000"></a>Data structures</h3>
<!--l. 411--><p class="noindent" >C has no equivalent construct to the Java class. Instead, C provides two aggregate data structures  arrays
and structures.
<!--l. 414--><p class="noindent" >Arrays in C are not objects, nor strictly single variables. Instead, an arrays name is the name referring to
the first memory address of a contiguous block of memory of the requested length. Arrays may be declared
or defined wherever scalar variables are declared or defined  arrays may be either arrays of Cs base types
or user-defined types.
                                                                                  
                                                                                  
<!--l. 419--><p class="noindent" >There is no array keyword in C, and no bounds checking at run-time. C array subscripts commence at 0,
the highest valid subscript of <span 
class="cmbx-10">int </span>a[N] thus being N-1.
<!--l. 422--><p class="noindent" >One dimensional arrays defined with (for example) <span 
class="cmbx-10">int </span>score[20]; <br 
class="newline" />
<!--l. 424--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> declare score as array of 20 int <br 
class="newline" />
<div 
class="colorbox" id="colorbox13"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;score[20];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;20</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div>  </div>
<!--l. 441--><p class="noindent" >Multi-dimesntional arrays?
<!--l. 443--><p class="noindent" >Strictly speaking, C does not support multi-dimensional arrays. However, if all (one-dimensional) arrays in
C are considered as vectors, then multi-dimensional arrays are simply understood as &#8220;vectors of
vectors&#8221;.
<!--l. 445--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> explain char str[10][20] <br 
class="newline" />
<!--l. 447--><p class="noindent" >declare str as array of 10 array of 20 char <br 
class="newline" />The number of elements of an array can be determined with :<br 
class="newline" />
<div 
class="colorbox" id="colorbox14"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#define</span><span 
class="cmtt-10">&#x00A0;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;(sizeof(score)</span><span 
class="cmtt-10">&#x00A0;/</span><span 
class="cmtt-10">&#x00A0;sizeof(score[0]))</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div></div>
<!--l. 464--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-12000"></a>User-defined C Structures</h3>
<!--l. 465--><p class="noindent" >Structures in C are aggregate datatypes consisting of fields or members of base types, or other
user-defined types. C structures may not include executable code, unlink methods in Java
classes.
<div 
class="colorbox" id="colorbox15"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;name[20];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;addr[80];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;age;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;p1,</span><span 
class="cmtt-10">&#x00A0;p2;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;ages;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;p1.age</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;p2.age;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;sum</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;their</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if(strcmp(p1.name,</span><span 
class="cmtt-10">&#x00A0;p2.name)</span><span 
class="cmtt-10">&#x00A0;==</span><span 
class="cmtt-10">&#x00A0;0)</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;do</span><span 
class="cmtt-10">&#x00A0;they</span><span 
class="cmtt-10">&#x00A0;have</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;same</span><span 
class="cmtt-10">&#x00A0;name?</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /></div></div>
<!--l. 490--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-13000"></a>Character arrays and strings</h3>
<!--l. 492--><p class="noindent" >C provides no base type that is a string, though the C compiler accepts the use of double quoted character
string literals and does the obvious thing. A string in C is a sequence of characters (bytes) in contiguous
memory locations. The string is terminated by the sentinel value of the NULL character (zero byte). When
a C compiler detects a string literal in a program, it will allocate enough contiguous global
(read-only) memory to hold the characters of the string (including the NULL byte at the
end).
                                                                                  
                                                                                  
<!--l. 498--><p class="noindent" >C does not record the length of a string anywhere (as does Java). Instead, by convention, the length of a
string is defined as the number of characters from the beginning of the string (its starting address) up to,
but not including, the NULL byte. The length of &#8220;hello&#8221; is 5.
<!--l. 502--><p class="noindent" >Arrays of characters are typically used to store character strings. Notice that the parameter to
the following function does not indicate any expected (maximum) size, or &#8220;length&#8221;, of the
array.
<div 
class="colorbox" id="colorbox16"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;my_strlen(char</span><span 
class="cmtt-10">&#x00A0;str[])</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;len</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;while(</span><span 
class="cmtt-10">&#x00A0;str[i]</span><span 
class="cmtt-10">&#x00A0;!=</span><span 
class="cmtt-10">&#x00A0;&#8217;\0&#8217;</span><span 
class="cmtt-10">&#x00A0;)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;len++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;i++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(len);</span><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 525--><p class="noindent" >The snippet of code below include two strings that are compared. Literal strings are stored as ASCII codes
and the strng comparison strcmp compares each character&#8217;s ASCII code in making the comparison. If
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003E;</span><span 
class="cmtt-10">&#x00A0;0</span></span></span>, s1 = s2 then the return =
0.
<!--l. 527--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/string.c" > string.c </a>
<!--l. 529--><p class="noindent" >The contents of string.c looks like this:
<div 
class="colorbox" id="colorbox17"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;string.h&#x003E;</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main(){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;s1[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Beb",</span><span 
class="cmtt-10">&#x00A0;s2[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee",</span><span 
class="cmtt-10">&#x00A0;s3[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee";</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;cmp;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;First</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s2</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s1,</span><span 
class="cmtt-10">&#x00A0;s2);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Second</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s1</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s1);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Third</span><span 
class="cmtt-10">&#x00A0;test,</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s3</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s3);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s3,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;mygcc</span><span 
class="cmtt-10">&#x00A0;-o</span><span 
class="cmtt-10">&#x00A0;string</span><span 
class="cmtt-10">&#x00A0;string.c</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;./string</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;-3</span><br /><span 
class="cmtt-10">s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;0</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><br /><br /></div></div>
<!--l. 577--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array.c" > array.c </a>
<!--l. 579--><p class="noindent" >The contents of array.c looks like this:
<div 
class="colorbox" id="colorbox18"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;sets</span><span 
class="cmtt-10">&#x00A0;up</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;two</span><span 
class="cmtt-10">&#x00A0;demensional</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;and</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;contents</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;locaion.</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.7</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;405</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMROWS</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMCOLS</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><br /><span 
class="cmtt-10">{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i,</span><span 
class="cmtt-10">&#x00A0;j;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;val[NUMROWS][NUMCOLS]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;{</span><span 
class="cmtt-10">&#x00A0;8,16,9,52,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;3,15,27,6,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;14,25,2,10</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;explicitly</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[0][0],val[0][1],val[0][2],val[0][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[1][0],val[1][1],val[1][2],val[1][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[2][0],val[2][1],val[2][2],val[2][3]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;loop</span><span 
class="cmtt-10">&#x00A0;through</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMROWS;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;start</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;new</span><span 
class="cmtt-10">&#x00A0;line</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;row</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(j</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;j</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMCOLS;</span><span 
class="cmtt-10">&#x00A0;j++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("%2d</span><span 
class="cmtt-10">&#x00A0;",</span><span 
class="cmtt-10">&#x00A0;val[i][j]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 642--><p class="noindent" >If we run array we get the following output
<div 
class="colorbox" id="colorbox19"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;10</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;1</span><br /><br /></div></div>
<!--l. 667--><p class="noindent" >The next code snippet shows the address of an array and some of its elements. It importantly shows the
equivalence of two types of common notation in dealing with addresses and arrays, Run the code
below. Note that the <span 
class="cmbx-10">&amp; operator </span>is not used before the array name. Because an array is a
pointer constant equivalent to the address of the first storage location reserved for the array. the
expressions &#8220;numbers&#8221; and &amp;numbers[0] are equivalent. As an aside, if you wanted to pass the
address of an array in a function call you could replace &amp;numbers[0] with simply numbers.
*/
<!--l. 677--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array-address.c" > array-address.c </a>
<!--l. 679--><p class="noindent" >The contents of array-address.c looks like this:
<div 
class="colorbox" id="colorbox20"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array-address.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;various</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;related</span><span 
class="cmtt-10">&#x00A0;items</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;an</span><span 
class="cmtt-10">&#x00A0;array.</span><span 
class="cmtt-10">&#x00A0;It</span><span 
class="cmtt-10">&#x00A0;also</span><span 
class="cmtt-10">&#x00A0;shows</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;equivalence</span><span 
class="cmtt-10">&#x00A0;between</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;plain</span><span 
class="cmtt-10">&#x00A0;name</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;case</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;numbers&#8217;&#8217;</span><span 
class="cmtt-10">&#x00A0;and</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;&amp;(numbers[0])&#8217;&#8217;</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.10</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;411</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMELS</span><span 
class="cmtt-10">&#x00A0;20</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numbers[NUMELS];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[0]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%ld\n&#8217;&#8217;,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;sizeof(int));</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[5]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)numbers);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 731--><p class="noindent" >Let&#8217;s look at the output from array-address
<div 
class="colorbox" id="colorbox21"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array-address</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;4</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;bffff894</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!</span><br /><br /></div></div>
 
</body></html> 

                                                                                  


http://www.cs.dartmouth.edu/~campbell/cs50/ccontinued.html
Depth: 2
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title></title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<meta name="originator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<!-- html --> 
<meta name="src" content="ccontinued.tex"> 
<meta name="date" content="2014-01-23 11:05:00"> 
<link rel="stylesheet" type="text/css" href="ccontinued.css"> 
</head><body 
>
<h1 class="likepartHead"><a 
 id="x1-1000"></a>CS 50 Software Design and Implementation</h1>
<h1 class="likepartHead"><a 
 id="x1-2000"></a>Lecture 6</h1>
<h1 class="likepartHead"><a 
 id="x1-3000"></a>C Continued: Preprocessor, Functions, Data Structures, Arrays, and Strings</h1>
<!--l. 21--><p class="noindent" >In this lecture we continue our introduction to the C langauge.
<h3 class="likesectionHead"><a 
 id="x1-4000"></a>Goals</h3>
<!--l. 25--><p class="noindent" >We plan to learn the following from today&#8217;s lecture:
     <ul class="itemize1">
     <li class="itemize">The C preprocessor
     </li>
     <li class="itemize">Functions
     </li>
     <li class="itemize">Data structures
     </li>
     <li class="itemize">Character arrays and strings</li></ul>
<!--l. 34--><p class="noindent" >OK. Let&#8217;s get started.
<!--l. 37--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-5000"></a>The C preprocessor</h3>
<!--l. 39--><p class="noindent" >You will notice that a few lines, typically near the beginning of a C program, begin with the hash or
pound sign, #. These lines are termed C preprocessor directives and are actually instructions (directives)
to a special program called the C preprocessor (located in /lib/cpp). As its name suggests, the C
preprocessor processes the text of a C program before the C compiler sees it. The preprocessor directives
(all beginning with #) should begin in column 1 (the 1st column) of any source line on which they
appear.
                                                                                  
                                                                                  
<!--l. 46--><p class="noindent" >The C preprocessor is easily able to locate these lines and then examine the characters following the #.
The following characters usually form a special word in the C preprocessors syntax which typically cause
the preprocessor to modify the C program before it is sent to the C compiler itself. Although there are
about 20 different preprocessor directives, well only discuss the most common one here and then a few
others as we need them.
<!--l. 52--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-6000"></a>Header file inclusion</h3>
<!--l. 54--><p class="noindent" >The #include directive, pronounced hash include, typically appears at the beginning of a
C program. It is used to textually include the entire contents of another file at the point of
the #include directive. A common #include directive, seen at the beginning of most C files
is
<div 
class="colorbox" id="colorbox1"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /></div>                                                                 </div>
<!--l. 69--><p class="noindent" >This directive indicates that the contents of the file named stdio.h should be included at this point (the
directive is replaced with the contents). There is no limit to the number of lines that may be included with
this directive and, in fact, the contents of the included file may have further #include directives which are
handled in the same way. We say that the inclusions are nested and, of course, care should be taken to
avoid recursive nestings!
<!--l. 75--><p class="noindent" >The example using <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;stdio.h&#x003E;</span></span></span>, above, demonstrates two important points. The filename itself appears
between the characters <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span>. The use of these characters indicates that the enclosed filename
should be found in the standard include directory, <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span>. The required file is then
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include/stdio.h</span></span></span>.
<!--l. 79--><p class="noindent" >The standard include files are used to consistently provide system-wide data structures or declarations
that are required in many different files. By having the standard include files centrally located and
globally available, all C programmers are guaranteed of using the same data structures and
declarations that they (all) require. C99 only defines 15 operating system independent header
files.
<!--l. 84--><p class="noindent" >Have a (recursive) look in the /usr/include directory yourself and you see that there are over 2000
standard include files available under LINUX!
<!--l. 87--><p class="noindent" >Importantly, it is the use of the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span> characters which signify that the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span> directory name
should be prepended to the filename to locate the required file. Alternatively, the &#8220; ... &#8221; characters may
also be used, as in the following example:
<div 
class="colorbox" id="colorbox2"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;"mystructures.h"</span><br /><br /></div>                                                          </div>
<!--l. 101--><p class="noindent" >to include the contents of the file mystructures.h at the correct point in the C program. Because the &#8220; ...&#8221;
characters are used, the file is sought in the present working directory, that is <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">./mystructures.h</span></span></span>. By
using the &#8220; ...&#8221; characters we can specify our own include files which are located in the same directory as
the C source programs themselves.
                                                                                  
                                                                                  
<!--l. 106--><p class="noindent" >In both of the above examples the indicated filename had the &#8220;extension&#8221; of .h. Whereas we have
previously said that the extension of .c is expected by the C compiler, the use of .h is only a convention
within UNIX. The .h indicates that the file is a header file, because they generally contain information
required at the head (beginning) of a C program. Header files typically (and should) contain
only declarations of C constructs, like data structures and constants used throughout the C
program. In particular, they should not contain any executable code, variable definitions, nor C
statements.
<!--l. 113--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-7000"></a>Defining textual constants</h3>
<!--l. 115--><p class="noindent" >Another frequently used C preprocessor directive is the #define directive, pronounced hash define. The
#define directive is used to introduce a textual value, or textual constant, which when recognized by the C
preprocessor will be textually substituted by its definition. Traditionally #define directives were the only
method available to C programmers, using old K&amp;R (Brian Kernighan and Dennis Ritchie) C,
of introducing constants in C programs. For example, frequently used #define-ed constants
are:
<div 
class="colorbox" id="colorbox3"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;FRESHMAN</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SOPHOMORE</span><span 
class="cmtt-10">&#x00A0;2</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;JUNIOR</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SENIOR</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /></div>              </div>
<!--l. 136--><p class="noindent" >After these definitions, each time the C preprocessor locates the sequence JUNIOR as a complete word
within the C program, it will be substituted for the character sequence 3. Although the new ANSI-C
standard has introduced a formal const construct for supporting constants, the #define directive is still
the preferred method of defining some forms of constants. For example, when defining an array of integers
(described in greater detail later) we use a #define directive to define the maximum size of the
array.
<!--l. 142--><p class="noindent" >Thereafter we use the #define-ed constant in the array definition:
<div 
class="colorbox" id="colorbox4"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><span 
class="cmtt-10">&#x00A0;100</span><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;myarray[MAXSIZE];</span><br /><br /></div>                                           </div>
<!--l. 156--><p class="noindent" >If necessary, a preprocessor token may be undefined is no longer required:
<div 
class="colorbox" id="colorbox5"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#undef</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><br /><br /></div>                                                                     </div>
<!--l. 169--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-8000"></a>Textual, inline functions</h3>
<!--l. 171--><p class="noindent" >The #define directive may also be used to define some inline functions, more correctly termed macros,
within your C programs. An often cited example is:
<div 
class="colorbox" id="colorbox6"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;x</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;x</span><br /><br /></div>                                                               </div>
<!--l. 186--><p class="noindent" >C does not have a standard function for calculating the square of, say, an integer value, but using the
inline macro defined above, we can now write:
                                                                                  
                                                                                  
<div 
class="colorbox" id="colorbox7"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(i);</span><br /><br /></div>                                                                   </div>
<!--l. 200--><p class="noindent" >where i is an integer variable. Notice that the macro substitution was performed with the macros
argument being i. In a manner akin to actual and formal parameter naming in Java (and C), the actual
parameter i is represented in the macro as the formal parameter x without problems. Each time x appears
as a unique &#8220;word&#8221; in the right-hand-side of the definition, it will be replaced in the C code by
i.
<!--l. 205--><p class="noindent" >Notice that this textual substitution may also be used for calculating (in this example) the square of an
integer constant. For example:
<div 
class="colorbox" id="colorbox8"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(3);</span><br /><br /></div>                                                                   </div>
<!--l. 219--><p class="noindent" >is expanded in an identical way. Our definition of sqr is not really rigourous enough to provide correct
results in all cases. For example, consider the &#8220;call&#8221; to sqr(x+1) which would evaluate to 2x+1! A more
correct definition would be:
<div 
class="colorbox" id="colorbox9"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;((x)</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;(x))</span><br /><br /></div>                                                         </div>
<!--l. 234--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-9000"></a>Conditional compilation</h3>
<!--l. 236--><p class="noindent" >Another often used feature of the C preprocessor is the use of conditional compilation directives. The C
compile pre-defines a few constants to &#8220;tell&#8221; the program the operating system in use, filename being
compiled, and so on:
<div 
class="colorbox" id="colorbox10"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#if</span><span 
class="cmtt-10">&#x00A0;defined(linux)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;LINUX</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(WIN32)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Windows</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(sun)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Suns</span><span 
class="cmtt-10">&#x00A0;Solaris</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#endif</span><br /><br /></div></div>
<!--l. 261--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-10000"></a>Functions</h3>
<!--l. 263--><p class="noindent" >Java supports constructors and methods which allocate instances of, and interrogate and modify the state
of, their own (implicit) objects. Constructors and methods are typically directed by their parameters. C
is a procedural programming language, meaning that its primary synchronous control flow
mechanism is the function call. Strictly speaking, C has no procedures, but instead has functions,
all of which return a single instance of a base or user-defined type. Cs functions access and
modify the global memory, and (possibly) their parameters. Although we may hope that a
function can only modify memory that it can &#8220;see&#8221; (through Cs scoping rules) or has been
provided (through its parameter list), this is untrue. By stating that there are only functions,
we are noting that all functions must return a value. While nearly true, C also has a <span 
class="cmbx-10">void</span>
type, difficult to describe, and often used as a place holder (to keep the compiler happy!). We
may think of a procedure in C, as a function that returns a <span 
class="cmbx-10">void</span>; that is to day, nothing is
returned. With a similar thought, we will often invoke a function, but have no use for its return
value. For example, a function such as printf() will return an integer as its result, but we
                                                                                  
                                                                                  
rarely need to use this integer. We can &#8220;cast its value&#8221; to <span 
class="cmbx-10">void</span>, effectively throwing away the
value.
<div 
class="colorbox" id="colorbox11"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">printf(</span><span 
class="cmtt-10">&#x00A0;....</span><span 
class="cmtt-10">&#x00A0;);</span><br /><br /></div>                                                                    </div>
<!--l. 288--><p class="noindent" >The default return datatype of a function is <span 
class="cmbx-10">int  </span>if a functions datatype is omitted, the compiler assumes
it to be an int. This has the unpleasant result, that if an external or yet to be defined functions
prototype is omitted, the compile will often silently assume an <span 
class="cmbx-10">int </span>return result. This is a
frequent cause of problems, particularly when dealing with functions returning floating point
values, as in Cs mathematics library. The use of gccs -pedantic switch allows us to trap such
errors.
<!--l. 294--><p class="noindent" >Every complete C program has an entry point named main, at which it appears the operating system calls
the program. Function main is of type <span 
class="cmbx-10">int  </span>this <span 
class="cmbx-10">int </span>is returned as the result of execution of the
whole program, with 0 indicating a successful execution, anything non-zero otherwise. Cs
functions may receive zero or more parameters. All parameters to Cs functions are passed by
value.
<!--l. 299--><p class="noindent" >Other than within a single file, the datatype of function parameters between the functions definition and
invocation is not checked, i.e. C provides no link-time cross file type checking. Perhaps surprisingly, C also
permits functions to receive a variable number of parameters. At run-time it is the functions responsibility
to deal with the data types received, and the compiler cannot perform any type checking on these
parameters.
<!--l. 305--><p class="noindent" >Function parameters are implicitly promoted to &#8220;higher&#8221; datatypes by the compiler  <span 
class="cmbx-10">char</span>s are promoted
to <span 
class="cmbx-10">int</span>s, and <span 
class="cmbx-10">float</span>s are promoted to <span 
class="cmbx-10">double</span>s.
<!--l. 308--><p class="noindent" >The following example code used functions. The code toss.c asks the use to enter the number of fair toss of
a coin and then computes the number of heads and tails. Random number generators are
used.
<!--l. 310--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/toss.c" > toss.c </a>
<!--l. 312--><p class="noindent" >The contents of toss.c looks like this:
<div 
class="colorbox" id="colorbox12"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;toss.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;user</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;computes</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;them</span><span 
class="cmtt-10">&#x00A0;out.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Input:</span><span 
class="cmtt-10">&#x00A0;User</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tosses</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Ouput:</span><span 
class="cmtt-10">&#x00A0;Displays</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;6.9</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;313</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;preprocessor</span><span 
class="cmtt-10">&#x00A0;include</span><span 
class="cmtt-10">&#x00A0;files</span><span 
class="cmtt-10">&#x00A0;found</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;/usr/include/</span><span 
class="cmtt-10">&#x00A0;directory</span><span 
class="cmtt-10">&#x00A0;*</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;printf()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;scanf()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;srand()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;rand()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;time.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;times</span><span 
class="cmtt-10">&#x00A0;(which</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;input)</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;returns</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;therefore</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;can</span><span 
class="cmtt-10">&#x00A0;be</span><span 
class="cmtt-10">&#x00A0;computed</span><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;prototpe</span><span 
class="cmtt-10">&#x00A0;declarations</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;);</span><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;,</span><span 
class="cmtt-10">&#x00A0;int);</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numHeads;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Generate</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;first</span><span 
class="cmtt-10">&#x00A0;seed</span><span 
class="cmtt-10">&#x00A0;value.</span><span 
class="cmtt-10">&#x00A0;A</span><span 
class="cmtt-10">&#x00A0;NULL</span><span 
class="cmtt-10">&#x00A0;arguments</span><span 
class="cmtt-10">&#x00A0;forces</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;read</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;computer&#8217;s</span><span 
class="cmtt-10">&#x00A0;internal</span><span 
class="cmtt-10">&#x00A0;time</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;seconds.</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;srand</span><span 
class="cmtt-10">&#x00A0;then</span><span 
class="cmtt-10">&#x00A0;uses</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;value</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;initialize</span><span 
class="cmtt-10">&#x00A0;rand()</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;srand(time(NULL));</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("How</span><span 
class="cmtt-10">&#x00A0;many</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;shall</span><span 
class="cmtt-10">&#x00A0;we</span><span 
class="cmtt-10">&#x00A0;do?</span><span 
class="cmtt-10">&#x00A0;Please</span><span 
class="cmtt-10">&#x00A0;enter:</span><span 
class="cmtt-10">&#x00A0;");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;scanf("%d",</span><span 
class="cmtt-10">&#x00A0;&amp;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("Ok,</span><span 
class="cmtt-10">&#x00A0;you</span><span 
class="cmtt-10">&#x00A0;entered</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tosses,</span><span 
class="cmtt-10">&#x00A0;so</span><span 
class="cmtt-10">&#x00A0;we&#8217;d</span><span 
class="cmtt-10">&#x00A0;expect</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tails\n",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numTosses/2,</span><span 
class="cmtt-10">&#x00A0;numTosses/2);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numHeads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;tossCoin(numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printStats(numHeads,</span><span 
class="cmtt-10">&#x00A0;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;printStats</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;tosses)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("The</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;%d,</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;(tosses-heads));</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;tossCoin</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;tosses){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i=1;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;tosses;</span><span 
class="cmtt-10">&#x00A0;i++)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;((1</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;(rand()%100))</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;50)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;heads++;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(heads);</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 409--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-11000"></a>Data structures</h3>
<!--l. 411--><p class="noindent" >C has no equivalent construct to the Java class. Instead, C provides two aggregate data structures  arrays
and structures.
<!--l. 414--><p class="noindent" >Arrays in C are not objects, nor strictly single variables. Instead, an arrays name is the name referring to
the first memory address of a contiguous block of memory of the requested length. Arrays may be declared
or defined wherever scalar variables are declared or defined  arrays may be either arrays of Cs base types
or user-defined types.
                                                                                  
                                                                                  
<!--l. 419--><p class="noindent" >There is no array keyword in C, and no bounds checking at run-time. C array subscripts commence at 0,
the highest valid subscript of <span 
class="cmbx-10">int </span>a[N] thus being N-1.
<!--l. 422--><p class="noindent" >One dimensional arrays defined with (for example) <span 
class="cmbx-10">int </span>score[20]; <br 
class="newline" />
<!--l. 424--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> declare score as array of 20 int <br 
class="newline" />
<div 
class="colorbox" id="colorbox13"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;score[20];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;20</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div>  </div>
<!--l. 441--><p class="noindent" >Multi-dimesntional arrays?
<!--l. 443--><p class="noindent" >Strictly speaking, C does not support multi-dimensional arrays. However, if all (one-dimensional) arrays in
C are considered as vectors, then multi-dimensional arrays are simply understood as &#8220;vectors of
vectors&#8221;.
<!--l. 445--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> explain char str[10][20] <br 
class="newline" />
<!--l. 447--><p class="noindent" >declare str as array of 10 array of 20 char <br 
class="newline" />The number of elements of an array can be determined with :<br 
class="newline" />
<div 
class="colorbox" id="colorbox14"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#define</span><span 
class="cmtt-10">&#x00A0;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;(sizeof(score)</span><span 
class="cmtt-10">&#x00A0;/</span><span 
class="cmtt-10">&#x00A0;sizeof(score[0]))</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div></div>
<!--l. 464--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-12000"></a>User-defined C Structures</h3>
<!--l. 465--><p class="noindent" >Structures in C are aggregate datatypes consisting of fields or members of base types, or other
user-defined types. C structures may not include executable code, unlink methods in Java
classes.
<div 
class="colorbox" id="colorbox15"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;name[20];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;addr[80];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;age;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;p1,</span><span 
class="cmtt-10">&#x00A0;p2;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;ages;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;p1.age</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;p2.age;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;sum</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;their</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if(strcmp(p1.name,</span><span 
class="cmtt-10">&#x00A0;p2.name)</span><span 
class="cmtt-10">&#x00A0;==</span><span 
class="cmtt-10">&#x00A0;0)</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;do</span><span 
class="cmtt-10">&#x00A0;they</span><span 
class="cmtt-10">&#x00A0;have</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;same</span><span 
class="cmtt-10">&#x00A0;name?</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /></div></div>
<!--l. 490--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-13000"></a>Character arrays and strings</h3>
<!--l. 492--><p class="noindent" >C provides no base type that is a string, though the C compiler accepts the use of double quoted character
string literals and does the obvious thing. A string in C is a sequence of characters (bytes) in contiguous
memory locations. The string is terminated by the sentinel value of the NULL character (zero byte). When
a C compiler detects a string literal in a program, it will allocate enough contiguous global
(read-only) memory to hold the characters of the string (including the NULL byte at the
end).
                                                                                  
                                                                                  
<!--l. 498--><p class="noindent" >C does not record the length of a string anywhere (as does Java). Instead, by convention, the length of a
string is defined as the number of characters from the beginning of the string (its starting address) up to,
but not including, the NULL byte. The length of &#8220;hello&#8221; is 5.
<!--l. 502--><p class="noindent" >Arrays of characters are typically used to store character strings. Notice that the parameter to
the following function does not indicate any expected (maximum) size, or &#8220;length&#8221;, of the
array.
<div 
class="colorbox" id="colorbox16"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;my_strlen(char</span><span 
class="cmtt-10">&#x00A0;str[])</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;len</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;while(</span><span 
class="cmtt-10">&#x00A0;str[i]</span><span 
class="cmtt-10">&#x00A0;!=</span><span 
class="cmtt-10">&#x00A0;&#8217;\0&#8217;</span><span 
class="cmtt-10">&#x00A0;)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;len++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;i++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(len);</span><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 525--><p class="noindent" >The snippet of code below include two strings that are compared. Literal strings are stored as ASCII codes
and the strng comparison strcmp compares each character&#8217;s ASCII code in making the comparison. If
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003E;</span><span 
class="cmtt-10">&#x00A0;0</span></span></span>, s1 = s2 then the return =
0.
<!--l. 527--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/string.c" > string.c </a>
<!--l. 529--><p class="noindent" >The contents of string.c looks like this:
<div 
class="colorbox" id="colorbox17"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;string.h&#x003E;</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main(){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;s1[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Beb",</span><span 
class="cmtt-10">&#x00A0;s2[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee",</span><span 
class="cmtt-10">&#x00A0;s3[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee";</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;cmp;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;First</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s2</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s1,</span><span 
class="cmtt-10">&#x00A0;s2);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Second</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s1</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s1);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Third</span><span 
class="cmtt-10">&#x00A0;test,</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s3</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s3);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s3,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;mygcc</span><span 
class="cmtt-10">&#x00A0;-o</span><span 
class="cmtt-10">&#x00A0;string</span><span 
class="cmtt-10">&#x00A0;string.c</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;./string</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;-3</span><br /><span 
class="cmtt-10">s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;0</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><br /><br /></div></div>
<!--l. 577--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array.c" > array.c </a>
<!--l. 579--><p class="noindent" >The contents of array.c looks like this:
<div 
class="colorbox" id="colorbox18"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;sets</span><span 
class="cmtt-10">&#x00A0;up</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;two</span><span 
class="cmtt-10">&#x00A0;demensional</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;and</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;contents</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;locaion.</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.7</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;405</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMROWS</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMCOLS</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><br /><span 
class="cmtt-10">{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i,</span><span 
class="cmtt-10">&#x00A0;j;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;val[NUMROWS][NUMCOLS]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;{</span><span 
class="cmtt-10">&#x00A0;8,16,9,52,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;3,15,27,6,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;14,25,2,10</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;explicitly</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[0][0],val[0][1],val[0][2],val[0][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[1][0],val[1][1],val[1][2],val[1][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[2][0],val[2][1],val[2][2],val[2][3]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;loop</span><span 
class="cmtt-10">&#x00A0;through</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMROWS;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;start</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;new</span><span 
class="cmtt-10">&#x00A0;line</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;row</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(j</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;j</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMCOLS;</span><span 
class="cmtt-10">&#x00A0;j++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("%2d</span><span 
class="cmtt-10">&#x00A0;",</span><span 
class="cmtt-10">&#x00A0;val[i][j]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 642--><p class="noindent" >If we run array we get the following output
<div 
class="colorbox" id="colorbox19"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;10</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;1</span><br /><br /></div></div>
<!--l. 667--><p class="noindent" >The next code snippet shows the address of an array and some of its elements. It importantly shows the
equivalence of two types of common notation in dealing with addresses and arrays, Run the code
below. Note that the <span 
class="cmbx-10">&amp; operator </span>is not used before the array name. Because an array is a
pointer constant equivalent to the address of the first storage location reserved for the array. the
expressions &#8220;numbers&#8221; and &amp;numbers[0] are equivalent. As an aside, if you wanted to pass the
address of an array in a function call you could replace &amp;numbers[0] with simply numbers.
*/
<!--l. 677--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array-address.c" > array-address.c </a>
<!--l. 679--><p class="noindent" >The contents of array-address.c looks like this:
<div 
class="colorbox" id="colorbox20"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array-address.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;various</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;related</span><span 
class="cmtt-10">&#x00A0;items</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;an</span><span 
class="cmtt-10">&#x00A0;array.</span><span 
class="cmtt-10">&#x00A0;It</span><span 
class="cmtt-10">&#x00A0;also</span><span 
class="cmtt-10">&#x00A0;shows</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;equivalence</span><span 
class="cmtt-10">&#x00A0;between</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;plain</span><span 
class="cmtt-10">&#x00A0;name</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;case</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;numbers&#8217;&#8217;</span><span 
class="cmtt-10">&#x00A0;and</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;&amp;(numbers[0])&#8217;&#8217;</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.10</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;411</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMELS</span><span 
class="cmtt-10">&#x00A0;20</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numbers[NUMELS];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[0]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%ld\n&#8217;&#8217;,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;sizeof(int));</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[5]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)numbers);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 731--><p class="noindent" >Let&#8217;s look at the output from array-address
<div 
class="colorbox" id="colorbox21"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array-address</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;4</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;bffff894</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!</span><br /><br /></div></div>
 
</body></html> 

                                                                                  


http://www.cs.dartmouth.edu/~campbell/cs50/ccontinued.html
Depth: 2
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title></title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<meta name="originator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<!-- html --> 
<meta name="src" content="ccontinued.tex"> 
<meta name="date" content="2014-01-23 11:05:00"> 
<link rel="stylesheet" type="text/css" href="ccontinued.css"> 
</head><body 
>
<h1 class="likepartHead"><a 
 id="x1-1000"></a>CS 50 Software Design and Implementation</h1>
<h1 class="likepartHead"><a 
 id="x1-2000"></a>Lecture 6</h1>
<h1 class="likepartHead"><a 
 id="x1-3000"></a>C Continued: Preprocessor, Functions, Data Structures, Arrays, and Strings</h1>
<!--l. 21--><p class="noindent" >In this lecture we continue our introduction to the C langauge.
<h3 class="likesectionHead"><a 
 id="x1-4000"></a>Goals</h3>
<!--l. 25--><p class="noindent" >We plan to learn the following from today&#8217;s lecture:
     <ul class="itemize1">
     <li class="itemize">The C preprocessor
     </li>
     <li class="itemize">Functions
     </li>
     <li class="itemize">Data structures
     </li>
     <li class="itemize">Character arrays and strings</li></ul>
<!--l. 34--><p class="noindent" >OK. Let&#8217;s get started.
<!--l. 37--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-5000"></a>The C preprocessor</h3>
<!--l. 39--><p class="noindent" >You will notice that a few lines, typically near the beginning of a C program, begin with the hash or
pound sign, #. These lines are termed C preprocessor directives and are actually instructions (directives)
to a special program called the C preprocessor (located in /lib/cpp). As its name suggests, the C
preprocessor processes the text of a C program before the C compiler sees it. The preprocessor directives
(all beginning with #) should begin in column 1 (the 1st column) of any source line on which they
appear.
                                                                                  
                                                                                  
<!--l. 46--><p class="noindent" >The C preprocessor is easily able to locate these lines and then examine the characters following the #.
The following characters usually form a special word in the C preprocessors syntax which typically cause
the preprocessor to modify the C program before it is sent to the C compiler itself. Although there are
about 20 different preprocessor directives, well only discuss the most common one here and then a few
others as we need them.
<!--l. 52--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-6000"></a>Header file inclusion</h3>
<!--l. 54--><p class="noindent" >The #include directive, pronounced hash include, typically appears at the beginning of a
C program. It is used to textually include the entire contents of another file at the point of
the #include directive. A common #include directive, seen at the beginning of most C files
is
<div 
class="colorbox" id="colorbox1"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /></div>                                                                 </div>
<!--l. 69--><p class="noindent" >This directive indicates that the contents of the file named stdio.h should be included at this point (the
directive is replaced with the contents). There is no limit to the number of lines that may be included with
this directive and, in fact, the contents of the included file may have further #include directives which are
handled in the same way. We say that the inclusions are nested and, of course, care should be taken to
avoid recursive nestings!
<!--l. 75--><p class="noindent" >The example using <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;stdio.h&#x003E;</span></span></span>, above, demonstrates two important points. The filename itself appears
between the characters <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span>. The use of these characters indicates that the enclosed filename
should be found in the standard include directory, <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span>. The required file is then
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include/stdio.h</span></span></span>.
<!--l. 79--><p class="noindent" >The standard include files are used to consistently provide system-wide data structures or declarations
that are required in many different files. By having the standard include files centrally located and
globally available, all C programmers are guaranteed of using the same data structures and
declarations that they (all) require. C99 only defines 15 operating system independent header
files.
<!--l. 84--><p class="noindent" >Have a (recursive) look in the /usr/include directory yourself and you see that there are over 2000
standard include files available under LINUX!
<!--l. 87--><p class="noindent" >Importantly, it is the use of the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span> characters which signify that the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span> directory name
should be prepended to the filename to locate the required file. Alternatively, the &#8220; ... &#8221; characters may
also be used, as in the following example:
<div 
class="colorbox" id="colorbox2"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;"mystructures.h"</span><br /><br /></div>                                                          </div>
<!--l. 101--><p class="noindent" >to include the contents of the file mystructures.h at the correct point in the C program. Because the &#8220; ...&#8221;
characters are used, the file is sought in the present working directory, that is <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">./mystructures.h</span></span></span>. By
using the &#8220; ...&#8221; characters we can specify our own include files which are located in the same directory as
the C source programs themselves.
                                                                                  
                                                                                  
<!--l. 106--><p class="noindent" >In both of the above examples the indicated filename had the &#8220;extension&#8221; of .h. Whereas we have
previously said that the extension of .c is expected by the C compiler, the use of .h is only a convention
within UNIX. The .h indicates that the file is a header file, because they generally contain information
required at the head (beginning) of a C program. Header files typically (and should) contain
only declarations of C constructs, like data structures and constants used throughout the C
program. In particular, they should not contain any executable code, variable definitions, nor C
statements.
<!--l. 113--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-7000"></a>Defining textual constants</h3>
<!--l. 115--><p class="noindent" >Another frequently used C preprocessor directive is the #define directive, pronounced hash define. The
#define directive is used to introduce a textual value, or textual constant, which when recognized by the C
preprocessor will be textually substituted by its definition. Traditionally #define directives were the only
method available to C programmers, using old K&amp;R (Brian Kernighan and Dennis Ritchie) C,
of introducing constants in C programs. For example, frequently used #define-ed constants
are:
<div 
class="colorbox" id="colorbox3"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;FRESHMAN</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SOPHOMORE</span><span 
class="cmtt-10">&#x00A0;2</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;JUNIOR</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SENIOR</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /></div>              </div>
<!--l. 136--><p class="noindent" >After these definitions, each time the C preprocessor locates the sequence JUNIOR as a complete word
within the C program, it will be substituted for the character sequence 3. Although the new ANSI-C
standard has introduced a formal const construct for supporting constants, the #define directive is still
the preferred method of defining some forms of constants. For example, when defining an array of integers
(described in greater detail later) we use a #define directive to define the maximum size of the
array.
<!--l. 142--><p class="noindent" >Thereafter we use the #define-ed constant in the array definition:
<div 
class="colorbox" id="colorbox4"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><span 
class="cmtt-10">&#x00A0;100</span><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;myarray[MAXSIZE];</span><br /><br /></div>                                           </div>
<!--l. 156--><p class="noindent" >If necessary, a preprocessor token may be undefined is no longer required:
<div 
class="colorbox" id="colorbox5"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#undef</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><br /><br /></div>                                                                     </div>
<!--l. 169--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-8000"></a>Textual, inline functions</h3>
<!--l. 171--><p class="noindent" >The #define directive may also be used to define some inline functions, more correctly termed macros,
within your C programs. An often cited example is:
<div 
class="colorbox" id="colorbox6"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;x</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;x</span><br /><br /></div>                                                               </div>
<!--l. 186--><p class="noindent" >C does not have a standard function for calculating the square of, say, an integer value, but using the
inline macro defined above, we can now write:
                                                                                  
                                                                                  
<div 
class="colorbox" id="colorbox7"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(i);</span><br /><br /></div>                                                                   </div>
<!--l. 200--><p class="noindent" >where i is an integer variable. Notice that the macro substitution was performed with the macros
argument being i. In a manner akin to actual and formal parameter naming in Java (and C), the actual
parameter i is represented in the macro as the formal parameter x without problems. Each time x appears
as a unique &#8220;word&#8221; in the right-hand-side of the definition, it will be replaced in the C code by
i.
<!--l. 205--><p class="noindent" >Notice that this textual substitution may also be used for calculating (in this example) the square of an
integer constant. For example:
<div 
class="colorbox" id="colorbox8"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(3);</span><br /><br /></div>                                                                   </div>
<!--l. 219--><p class="noindent" >is expanded in an identical way. Our definition of sqr is not really rigourous enough to provide correct
results in all cases. For example, consider the &#8220;call&#8221; to sqr(x+1) which would evaluate to 2x+1! A more
correct definition would be:
<div 
class="colorbox" id="colorbox9"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;((x)</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;(x))</span><br /><br /></div>                                                         </div>
<!--l. 234--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-9000"></a>Conditional compilation</h3>
<!--l. 236--><p class="noindent" >Another often used feature of the C preprocessor is the use of conditional compilation directives. The C
compile pre-defines a few constants to &#8220;tell&#8221; the program the operating system in use, filename being
compiled, and so on:
<div 
class="colorbox" id="colorbox10"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#if</span><span 
class="cmtt-10">&#x00A0;defined(linux)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;LINUX</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(WIN32)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Windows</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(sun)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Suns</span><span 
class="cmtt-10">&#x00A0;Solaris</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#endif</span><br /><br /></div></div>
<!--l. 261--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-10000"></a>Functions</h3>
<!--l. 263--><p class="noindent" >Java supports constructors and methods which allocate instances of, and interrogate and modify the state
of, their own (implicit) objects. Constructors and methods are typically directed by their parameters. C
is a procedural programming language, meaning that its primary synchronous control flow
mechanism is the function call. Strictly speaking, C has no procedures, but instead has functions,
all of which return a single instance of a base or user-defined type. Cs functions access and
modify the global memory, and (possibly) their parameters. Although we may hope that a
function can only modify memory that it can &#8220;see&#8221; (through Cs scoping rules) or has been
provided (through its parameter list), this is untrue. By stating that there are only functions,
we are noting that all functions must return a value. While nearly true, C also has a <span 
class="cmbx-10">void</span>
type, difficult to describe, and often used as a place holder (to keep the compiler happy!). We
may think of a procedure in C, as a function that returns a <span 
class="cmbx-10">void</span>; that is to day, nothing is
returned. With a similar thought, we will often invoke a function, but have no use for its return
value. For example, a function such as printf() will return an integer as its result, but we
                                                                                  
                                                                                  
rarely need to use this integer. We can &#8220;cast its value&#8221; to <span 
class="cmbx-10">void</span>, effectively throwing away the
value.
<div 
class="colorbox" id="colorbox11"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">printf(</span><span 
class="cmtt-10">&#x00A0;....</span><span 
class="cmtt-10">&#x00A0;);</span><br /><br /></div>                                                                    </div>
<!--l. 288--><p class="noindent" >The default return datatype of a function is <span 
class="cmbx-10">int  </span>if a functions datatype is omitted, the compiler assumes
it to be an int. This has the unpleasant result, that if an external or yet to be defined functions
prototype is omitted, the compile will often silently assume an <span 
class="cmbx-10">int </span>return result. This is a
frequent cause of problems, particularly when dealing with functions returning floating point
values, as in Cs mathematics library. The use of gccs -pedantic switch allows us to trap such
errors.
<!--l. 294--><p class="noindent" >Every complete C program has an entry point named main, at which it appears the operating system calls
the program. Function main is of type <span 
class="cmbx-10">int  </span>this <span 
class="cmbx-10">int </span>is returned as the result of execution of the
whole program, with 0 indicating a successful execution, anything non-zero otherwise. Cs
functions may receive zero or more parameters. All parameters to Cs functions are passed by
value.
<!--l. 299--><p class="noindent" >Other than within a single file, the datatype of function parameters between the functions definition and
invocation is not checked, i.e. C provides no link-time cross file type checking. Perhaps surprisingly, C also
permits functions to receive a variable number of parameters. At run-time it is the functions responsibility
to deal with the data types received, and the compiler cannot perform any type checking on these
parameters.
<!--l. 305--><p class="noindent" >Function parameters are implicitly promoted to &#8220;higher&#8221; datatypes by the compiler  <span 
class="cmbx-10">char</span>s are promoted
to <span 
class="cmbx-10">int</span>s, and <span 
class="cmbx-10">float</span>s are promoted to <span 
class="cmbx-10">double</span>s.
<!--l. 308--><p class="noindent" >The following example code used functions. The code toss.c asks the use to enter the number of fair toss of
a coin and then computes the number of heads and tails. Random number generators are
used.
<!--l. 310--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/toss.c" > toss.c </a>
<!--l. 312--><p class="noindent" >The contents of toss.c looks like this:
<div 
class="colorbox" id="colorbox12"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;toss.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;user</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;computes</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;them</span><span 
class="cmtt-10">&#x00A0;out.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Input:</span><span 
class="cmtt-10">&#x00A0;User</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tosses</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Ouput:</span><span 
class="cmtt-10">&#x00A0;Displays</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;6.9</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;313</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;preprocessor</span><span 
class="cmtt-10">&#x00A0;include</span><span 
class="cmtt-10">&#x00A0;files</span><span 
class="cmtt-10">&#x00A0;found</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;/usr/include/</span><span 
class="cmtt-10">&#x00A0;directory</span><span 
class="cmtt-10">&#x00A0;*</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;printf()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;scanf()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;srand()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;rand()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;time.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;times</span><span 
class="cmtt-10">&#x00A0;(which</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;input)</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;returns</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;therefore</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;can</span><span 
class="cmtt-10">&#x00A0;be</span><span 
class="cmtt-10">&#x00A0;computed</span><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;prototpe</span><span 
class="cmtt-10">&#x00A0;declarations</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;);</span><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;,</span><span 
class="cmtt-10">&#x00A0;int);</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numHeads;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Generate</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;first</span><span 
class="cmtt-10">&#x00A0;seed</span><span 
class="cmtt-10">&#x00A0;value.</span><span 
class="cmtt-10">&#x00A0;A</span><span 
class="cmtt-10">&#x00A0;NULL</span><span 
class="cmtt-10">&#x00A0;arguments</span><span 
class="cmtt-10">&#x00A0;forces</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;read</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;computer&#8217;s</span><span 
class="cmtt-10">&#x00A0;internal</span><span 
class="cmtt-10">&#x00A0;time</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;seconds.</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;srand</span><span 
class="cmtt-10">&#x00A0;then</span><span 
class="cmtt-10">&#x00A0;uses</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;value</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;initialize</span><span 
class="cmtt-10">&#x00A0;rand()</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;srand(time(NULL));</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("How</span><span 
class="cmtt-10">&#x00A0;many</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;shall</span><span 
class="cmtt-10">&#x00A0;we</span><span 
class="cmtt-10">&#x00A0;do?</span><span 
class="cmtt-10">&#x00A0;Please</span><span 
class="cmtt-10">&#x00A0;enter:</span><span 
class="cmtt-10">&#x00A0;");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;scanf("%d",</span><span 
class="cmtt-10">&#x00A0;&amp;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("Ok,</span><span 
class="cmtt-10">&#x00A0;you</span><span 
class="cmtt-10">&#x00A0;entered</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tosses,</span><span 
class="cmtt-10">&#x00A0;so</span><span 
class="cmtt-10">&#x00A0;we&#8217;d</span><span 
class="cmtt-10">&#x00A0;expect</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tails\n",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numTosses/2,</span><span 
class="cmtt-10">&#x00A0;numTosses/2);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numHeads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;tossCoin(numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printStats(numHeads,</span><span 
class="cmtt-10">&#x00A0;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;printStats</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;tosses)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("The</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;%d,</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;(tosses-heads));</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;tossCoin</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;tosses){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i=1;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;tosses;</span><span 
class="cmtt-10">&#x00A0;i++)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;((1</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;(rand()%100))</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;50)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;heads++;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(heads);</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 409--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-11000"></a>Data structures</h3>
<!--l. 411--><p class="noindent" >C has no equivalent construct to the Java class. Instead, C provides two aggregate data structures  arrays
and structures.
<!--l. 414--><p class="noindent" >Arrays in C are not objects, nor strictly single variables. Instead, an arrays name is the name referring to
the first memory address of a contiguous block of memory of the requested length. Arrays may be declared
or defined wherever scalar variables are declared or defined  arrays may be either arrays of Cs base types
or user-defined types.
                                                                                  
                                                                                  
<!--l. 419--><p class="noindent" >There is no array keyword in C, and no bounds checking at run-time. C array subscripts commence at 0,
the highest valid subscript of <span 
class="cmbx-10">int </span>a[N] thus being N-1.
<!--l. 422--><p class="noindent" >One dimensional arrays defined with (for example) <span 
class="cmbx-10">int </span>score[20]; <br 
class="newline" />
<!--l. 424--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> declare score as array of 20 int <br 
class="newline" />
<div 
class="colorbox" id="colorbox13"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;score[20];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;20</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div>  </div>
<!--l. 441--><p class="noindent" >Multi-dimesntional arrays?
<!--l. 443--><p class="noindent" >Strictly speaking, C does not support multi-dimensional arrays. However, if all (one-dimensional) arrays in
C are considered as vectors, then multi-dimensional arrays are simply understood as &#8220;vectors of
vectors&#8221;.
<!--l. 445--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> explain char str[10][20] <br 
class="newline" />
<!--l. 447--><p class="noindent" >declare str as array of 10 array of 20 char <br 
class="newline" />The number of elements of an array can be determined with :<br 
class="newline" />
<div 
class="colorbox" id="colorbox14"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#define</span><span 
class="cmtt-10">&#x00A0;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;(sizeof(score)</span><span 
class="cmtt-10">&#x00A0;/</span><span 
class="cmtt-10">&#x00A0;sizeof(score[0]))</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div></div>
<!--l. 464--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-12000"></a>User-defined C Structures</h3>
<!--l. 465--><p class="noindent" >Structures in C are aggregate datatypes consisting of fields or members of base types, or other
user-defined types. C structures may not include executable code, unlink methods in Java
classes.
<div 
class="colorbox" id="colorbox15"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;name[20];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;addr[80];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;age;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;p1,</span><span 
class="cmtt-10">&#x00A0;p2;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;ages;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;p1.age</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;p2.age;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;sum</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;their</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if(strcmp(p1.name,</span><span 
class="cmtt-10">&#x00A0;p2.name)</span><span 
class="cmtt-10">&#x00A0;==</span><span 
class="cmtt-10">&#x00A0;0)</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;do</span><span 
class="cmtt-10">&#x00A0;they</span><span 
class="cmtt-10">&#x00A0;have</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;same</span><span 
class="cmtt-10">&#x00A0;name?</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /></div></div>
<!--l. 490--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-13000"></a>Character arrays and strings</h3>
<!--l. 492--><p class="noindent" >C provides no base type that is a string, though the C compiler accepts the use of double quoted character
string literals and does the obvious thing. A string in C is a sequence of characters (bytes) in contiguous
memory locations. The string is terminated by the sentinel value of the NULL character (zero byte). When
a C compiler detects a string literal in a program, it will allocate enough contiguous global
(read-only) memory to hold the characters of the string (including the NULL byte at the
end).
                                                                                  
                                                                                  
<!--l. 498--><p class="noindent" >C does not record the length of a string anywhere (as does Java). Instead, by convention, the length of a
string is defined as the number of characters from the beginning of the string (its starting address) up to,
but not including, the NULL byte. The length of &#8220;hello&#8221; is 5.
<!--l. 502--><p class="noindent" >Arrays of characters are typically used to store character strings. Notice that the parameter to
the following function does not indicate any expected (maximum) size, or &#8220;length&#8221;, of the
array.
<div 
class="colorbox" id="colorbox16"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;my_strlen(char</span><span 
class="cmtt-10">&#x00A0;str[])</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;len</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;while(</span><span 
class="cmtt-10">&#x00A0;str[i]</span><span 
class="cmtt-10">&#x00A0;!=</span><span 
class="cmtt-10">&#x00A0;&#8217;\0&#8217;</span><span 
class="cmtt-10">&#x00A0;)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;len++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;i++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(len);</span><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 525--><p class="noindent" >The snippet of code below include two strings that are compared. Literal strings are stored as ASCII codes
and the strng comparison strcmp compares each character&#8217;s ASCII code in making the comparison. If
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003E;</span><span 
class="cmtt-10">&#x00A0;0</span></span></span>, s1 = s2 then the return =
0.
<!--l. 527--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/string.c" > string.c </a>
<!--l. 529--><p class="noindent" >The contents of string.c looks like this:
<div 
class="colorbox" id="colorbox17"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;string.h&#x003E;</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main(){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;s1[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Beb",</span><span 
class="cmtt-10">&#x00A0;s2[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee",</span><span 
class="cmtt-10">&#x00A0;s3[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee";</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;cmp;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;First</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s2</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s1,</span><span 
class="cmtt-10">&#x00A0;s2);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Second</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s1</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s1);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Third</span><span 
class="cmtt-10">&#x00A0;test,</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s3</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s3);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s3,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;mygcc</span><span 
class="cmtt-10">&#x00A0;-o</span><span 
class="cmtt-10">&#x00A0;string</span><span 
class="cmtt-10">&#x00A0;string.c</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;./string</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;-3</span><br /><span 
class="cmtt-10">s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;0</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><br /><br /></div></div>
<!--l. 577--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array.c" > array.c </a>
<!--l. 579--><p class="noindent" >The contents of array.c looks like this:
<div 
class="colorbox" id="colorbox18"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;sets</span><span 
class="cmtt-10">&#x00A0;up</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;two</span><span 
class="cmtt-10">&#x00A0;demensional</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;and</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;contents</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;locaion.</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.7</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;405</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMROWS</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMCOLS</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><br /><span 
class="cmtt-10">{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i,</span><span 
class="cmtt-10">&#x00A0;j;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;val[NUMROWS][NUMCOLS]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;{</span><span 
class="cmtt-10">&#x00A0;8,16,9,52,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;3,15,27,6,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;14,25,2,10</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;explicitly</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[0][0],val[0][1],val[0][2],val[0][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[1][0],val[1][1],val[1][2],val[1][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[2][0],val[2][1],val[2][2],val[2][3]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;loop</span><span 
class="cmtt-10">&#x00A0;through</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMROWS;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;start</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;new</span><span 
class="cmtt-10">&#x00A0;line</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;row</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(j</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;j</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMCOLS;</span><span 
class="cmtt-10">&#x00A0;j++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("%2d</span><span 
class="cmtt-10">&#x00A0;",</span><span 
class="cmtt-10">&#x00A0;val[i][j]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 642--><p class="noindent" >If we run array we get the following output
<div 
class="colorbox" id="colorbox19"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;10</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;1</span><br /><br /></div></div>
<!--l. 667--><p class="noindent" >The next code snippet shows the address of an array and some of its elements. It importantly shows the
equivalence of two types of common notation in dealing with addresses and arrays, Run the code
below. Note that the <span 
class="cmbx-10">&amp; operator </span>is not used before the array name. Because an array is a
pointer constant equivalent to the address of the first storage location reserved for the array. the
expressions &#8220;numbers&#8221; and &amp;numbers[0] are equivalent. As an aside, if you wanted to pass the
address of an array in a function call you could replace &amp;numbers[0] with simply numbers.
*/
<!--l. 677--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array-address.c" > array-address.c </a>
<!--l. 679--><p class="noindent" >The contents of array-address.c looks like this:
<div 
class="colorbox" id="colorbox20"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array-address.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;various</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;related</span><span 
class="cmtt-10">&#x00A0;items</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;an</span><span 
class="cmtt-10">&#x00A0;array.</span><span 
class="cmtt-10">&#x00A0;It</span><span 
class="cmtt-10">&#x00A0;also</span><span 
class="cmtt-10">&#x00A0;shows</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;equivalence</span><span 
class="cmtt-10">&#x00A0;between</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;plain</span><span 
class="cmtt-10">&#x00A0;name</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;case</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;numbers&#8217;&#8217;</span><span 
class="cmtt-10">&#x00A0;and</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;&amp;(numbers[0])&#8217;&#8217;</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.10</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;411</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMELS</span><span 
class="cmtt-10">&#x00A0;20</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numbers[NUMELS];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[0]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%ld\n&#8217;&#8217;,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;sizeof(int));</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[5]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)numbers);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 731--><p class="noindent" >Let&#8217;s look at the output from array-address
<div 
class="colorbox" id="colorbox21"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array-address</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;4</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;bffff894</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!</span><br /><br /></div></div>
 
</body></html> 

                                                                                  


http://www.cs.dartmouth.edu/~campbell/cs50/ccontinued.html
Depth: 2
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  
  "http://www.w3.org/TR/html4/loose.dtd">  
<html > 
<head><title></title> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<meta name="generator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<meta name="originator" content="TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)"> 
<!-- html --> 
<meta name="src" content="ccontinued.tex"> 
<meta name="date" content="2014-01-23 11:05:00"> 
<link rel="stylesheet" type="text/css" href="ccontinued.css"> 
</head><body 
>
<h1 class="likepartHead"><a 
 id="x1-1000"></a>CS 50 Software Design and Implementation</h1>
<h1 class="likepartHead"><a 
 id="x1-2000"></a>Lecture 6</h1>
<h1 class="likepartHead"><a 
 id="x1-3000"></a>C Continued: Preprocessor, Functions, Data Structures, Arrays, and Strings</h1>
<!--l. 21--><p class="noindent" >In this lecture we continue our introduction to the C langauge.
<h3 class="likesectionHead"><a 
 id="x1-4000"></a>Goals</h3>
<!--l. 25--><p class="noindent" >We plan to learn the following from today&#8217;s lecture:
     <ul class="itemize1">
     <li class="itemize">The C preprocessor
     </li>
     <li class="itemize">Functions
     </li>
     <li class="itemize">Data structures
     </li>
     <li class="itemize">Character arrays and strings</li></ul>
<!--l. 34--><p class="noindent" >OK. Let&#8217;s get started.
<!--l. 37--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-5000"></a>The C preprocessor</h3>
<!--l. 39--><p class="noindent" >You will notice that a few lines, typically near the beginning of a C program, begin with the hash or
pound sign, #. These lines are termed C preprocessor directives and are actually instructions (directives)
to a special program called the C preprocessor (located in /lib/cpp). As its name suggests, the C
preprocessor processes the text of a C program before the C compiler sees it. The preprocessor directives
(all beginning with #) should begin in column 1 (the 1st column) of any source line on which they
appear.
                                                                                  
                                                                                  
<!--l. 46--><p class="noindent" >The C preprocessor is easily able to locate these lines and then examine the characters following the #.
The following characters usually form a special word in the C preprocessors syntax which typically cause
the preprocessor to modify the C program before it is sent to the C compiler itself. Although there are
about 20 different preprocessor directives, well only discuss the most common one here and then a few
others as we need them.
<!--l. 52--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-6000"></a>Header file inclusion</h3>
<!--l. 54--><p class="noindent" >The #include directive, pronounced hash include, typically appears at the beginning of a
C program. It is used to textually include the entire contents of another file at the point of
the #include directive. A common #include directive, seen at the beginning of most C files
is
<div 
class="colorbox" id="colorbox1"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /></div>                                                                 </div>
<!--l. 69--><p class="noindent" >This directive indicates that the contents of the file named stdio.h should be included at this point (the
directive is replaced with the contents). There is no limit to the number of lines that may be included with
this directive and, in fact, the contents of the included file may have further #include directives which are
handled in the same way. We say that the inclusions are nested and, of course, care should be taken to
avoid recursive nestings!
<!--l. 75--><p class="noindent" >The example using <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;stdio.h&#x003E;</span></span></span>, above, demonstrates two important points. The filename itself appears
between the characters <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span>. The use of these characters indicates that the enclosed filename
should be found in the standard include directory, <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span>. The required file is then
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include/stdio.h</span></span></span>.
<!--l. 79--><p class="noindent" >The standard include files are used to consistently provide system-wide data structures or declarations
that are required in many different files. By having the standard include files centrally located and
globally available, all C programmers are guaranteed of using the same data structures and
declarations that they (all) require. C99 only defines 15 operating system independent header
files.
<!--l. 84--><p class="noindent" >Have a (recursive) look in the /usr/include directory yourself and you see that there are over 2000
standard include files available under LINUX!
<!--l. 87--><p class="noindent" >Importantly, it is the use of the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span></span></span> characters which signify that the <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">/usr/include</span></span></span> directory name
should be prepended to the filename to locate the required file. Alternatively, the &#8220; ... &#8221; characters may
also be used, as in the following example:
<div 
class="colorbox" id="colorbox2"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;"mystructures.h"</span><br /><br /></div>                                                          </div>
<!--l. 101--><p class="noindent" >to include the contents of the file mystructures.h at the correct point in the C program. Because the &#8220; ...&#8221;
characters are used, the file is sought in the present working directory, that is <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">./mystructures.h</span></span></span>. By
using the &#8220; ...&#8221; characters we can specify our own include files which are located in the same directory as
the C source programs themselves.
                                                                                  
                                                                                  
<!--l. 106--><p class="noindent" >In both of the above examples the indicated filename had the &#8220;extension&#8221; of .h. Whereas we have
previously said that the extension of .c is expected by the C compiler, the use of .h is only a convention
within UNIX. The .h indicates that the file is a header file, because they generally contain information
required at the head (beginning) of a C program. Header files typically (and should) contain
only declarations of C constructs, like data structures and constants used throughout the C
program. In particular, they should not contain any executable code, variable definitions, nor C
statements.
<!--l. 113--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-7000"></a>Defining textual constants</h3>
<!--l. 115--><p class="noindent" >Another frequently used C preprocessor directive is the #define directive, pronounced hash define. The
#define directive is used to introduce a textual value, or textual constant, which when recognized by the C
preprocessor will be textually substituted by its definition. Traditionally #define directives were the only
method available to C programmers, using old K&amp;R (Brian Kernighan and Dennis Ritchie) C,
of introducing constants in C programs. For example, frequently used #define-ed constants
are:
<div 
class="colorbox" id="colorbox3"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;FRESHMAN</span><span 
class="cmtt-10">&#x00A0;1</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SOPHOMORE</span><span 
class="cmtt-10">&#x00A0;2</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;JUNIOR</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;SENIOR</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /></div>              </div>
<!--l. 136--><p class="noindent" >After these definitions, each time the C preprocessor locates the sequence JUNIOR as a complete word
within the C program, it will be substituted for the character sequence 3. Although the new ANSI-C
standard has introduced a formal const construct for supporting constants, the #define directive is still
the preferred method of defining some forms of constants. For example, when defining an array of integers
(described in greater detail later) we use a #define directive to define the maximum size of the
array.
<!--l. 142--><p class="noindent" >Thereafter we use the #define-ed constant in the array definition:
<div 
class="colorbox" id="colorbox4"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><span 
class="cmtt-10">&#x00A0;100</span><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;myarray[MAXSIZE];</span><br /><br /></div>                                           </div>
<!--l. 156--><p class="noindent" >If necessary, a preprocessor token may be undefined is no longer required:
<div 
class="colorbox" id="colorbox5"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#undef</span><span 
class="cmtt-10">&#x00A0;MAXSIZE</span><br /><br /></div>                                                                     </div>
<!--l. 169--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-8000"></a>Textual, inline functions</h3>
<!--l. 171--><p class="noindent" >The #define directive may also be used to define some inline functions, more correctly termed macros,
within your C programs. An often cited example is:
<div 
class="colorbox" id="colorbox6"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;x</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;x</span><br /><br /></div>                                                               </div>
<!--l. 186--><p class="noindent" >C does not have a standard function for calculating the square of, say, an integer value, but using the
inline macro defined above, we can now write:
                                                                                  
                                                                                  
<div 
class="colorbox" id="colorbox7"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(i);</span><br /><br /></div>                                                                   </div>
<!--l. 200--><p class="noindent" >where i is an integer variable. Notice that the macro substitution was performed with the macros
argument being i. In a manner akin to actual and formal parameter naming in Java (and C), the actual
parameter i is represented in the macro as the formal parameter x without problems. Each time x appears
as a unique &#8220;word&#8221; in the right-hand-side of the definition, it will be replaced in the C code by
i.
<!--l. 205--><p class="noindent" >Notice that this textual substitution may also be used for calculating (in this example) the square of an
integer constant. For example:
<div 
class="colorbox" id="colorbox8"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">result</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;sqr(3);</span><br /><br /></div>                                                                   </div>
<!--l. 219--><p class="noindent" >is expanded in an identical way. Our definition of sqr is not really rigourous enough to provide correct
results in all cases. For example, consider the &#8220;call&#8221; to sqr(x+1) which would evaluate to 2x+1! A more
correct definition would be:
<div 
class="colorbox" id="colorbox9"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;sqr(x)</span><span 
class="cmtt-10">&#x00A0;((x)</span><span 
class="cmtt-10">&#x00A0;*</span><span 
class="cmtt-10">&#x00A0;(x))</span><br /><br /></div>                                                         </div>
<!--l. 234--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-9000"></a>Conditional compilation</h3>
<!--l. 236--><p class="noindent" >Another often used feature of the C preprocessor is the use of conditional compilation directives. The C
compile pre-defines a few constants to &#8220;tell&#8221; the program the operating system in use, filename being
compiled, and so on:
<div 
class="colorbox" id="colorbox10"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#if</span><span 
class="cmtt-10">&#x00A0;defined(linux)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;LINUX</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(WIN32)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Windows</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#elif</span><span 
class="cmtt-10">&#x00A0;defined(sun)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;compile</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;specific</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;Suns</span><span 
class="cmtt-10">&#x00A0;Solaris</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;......</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#endif</span><br /><br /></div></div>
<!--l. 261--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-10000"></a>Functions</h3>
<!--l. 263--><p class="noindent" >Java supports constructors and methods which allocate instances of, and interrogate and modify the state
of, their own (implicit) objects. Constructors and methods are typically directed by their parameters. C
is a procedural programming language, meaning that its primary synchronous control flow
mechanism is the function call. Strictly speaking, C has no procedures, but instead has functions,
all of which return a single instance of a base or user-defined type. Cs functions access and
modify the global memory, and (possibly) their parameters. Although we may hope that a
function can only modify memory that it can &#8220;see&#8221; (through Cs scoping rules) or has been
provided (through its parameter list), this is untrue. By stating that there are only functions,
we are noting that all functions must return a value. While nearly true, C also has a <span 
class="cmbx-10">void</span>
type, difficult to describe, and often used as a place holder (to keep the compiler happy!). We
may think of a procedure in C, as a function that returns a <span 
class="cmbx-10">void</span>; that is to day, nothing is
returned. With a similar thought, we will often invoke a function, but have no use for its return
value. For example, a function such as printf() will return an integer as its result, but we
                                                                                  
                                                                                  
rarely need to use this integer. We can &#8220;cast its value&#8221; to <span 
class="cmbx-10">void</span>, effectively throwing away the
value.
<div 
class="colorbox" id="colorbox11"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">printf(</span><span 
class="cmtt-10">&#x00A0;....</span><span 
class="cmtt-10">&#x00A0;);</span><br /><br /></div>                                                                    </div>
<!--l. 288--><p class="noindent" >The default return datatype of a function is <span 
class="cmbx-10">int  </span>if a functions datatype is omitted, the compiler assumes
it to be an int. This has the unpleasant result, that if an external or yet to be defined functions
prototype is omitted, the compile will often silently assume an <span 
class="cmbx-10">int </span>return result. This is a
frequent cause of problems, particularly when dealing with functions returning floating point
values, as in Cs mathematics library. The use of gccs -pedantic switch allows us to trap such
errors.
<!--l. 294--><p class="noindent" >Every complete C program has an entry point named main, at which it appears the operating system calls
the program. Function main is of type <span 
class="cmbx-10">int  </span>this <span 
class="cmbx-10">int </span>is returned as the result of execution of the
whole program, with 0 indicating a successful execution, anything non-zero otherwise. Cs
functions may receive zero or more parameters. All parameters to Cs functions are passed by
value.
<!--l. 299--><p class="noindent" >Other than within a single file, the datatype of function parameters between the functions definition and
invocation is not checked, i.e. C provides no link-time cross file type checking. Perhaps surprisingly, C also
permits functions to receive a variable number of parameters. At run-time it is the functions responsibility
to deal with the data types received, and the compiler cannot perform any type checking on these
parameters.
<!--l. 305--><p class="noindent" >Function parameters are implicitly promoted to &#8220;higher&#8221; datatypes by the compiler  <span 
class="cmbx-10">char</span>s are promoted
to <span 
class="cmbx-10">int</span>s, and <span 
class="cmbx-10">float</span>s are promoted to <span 
class="cmbx-10">double</span>s.
<!--l. 308--><p class="noindent" >The following example code used functions. The code toss.c asks the use to enter the number of fair toss of
a coin and then computes the number of heads and tails. Random number generators are
used.
<!--l. 310--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/toss.c" > toss.c </a>
<!--l. 312--><p class="noindent" >The contents of toss.c looks like this:
<div 
class="colorbox" id="colorbox12"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;toss.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;user</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;the</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;computes</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;them</span><span 
class="cmtt-10">&#x00A0;out.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Input:</span><span 
class="cmtt-10">&#x00A0;User</span><span 
class="cmtt-10">&#x00A0;enters</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tosses</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Ouput:</span><span 
class="cmtt-10">&#x00A0;Displays</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;tails.</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;6.9</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;313</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;preprocessor</span><span 
class="cmtt-10">&#x00A0;include</span><span 
class="cmtt-10">&#x00A0;files</span><span 
class="cmtt-10">&#x00A0;found</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;/usr/include/</span><span 
class="cmtt-10">&#x00A0;directory</span><span 
class="cmtt-10">&#x00A0;*</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;printf()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;scanf()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;srand()</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;rand()</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;time.h&#x003E;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;needed</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;call</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;toss</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;times</span><span 
class="cmtt-10">&#x00A0;(which</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;input)</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;returns</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;therefore</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;can</span><span 
class="cmtt-10">&#x00A0;be</span><span 
class="cmtt-10">&#x00A0;computed</span><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;prototpe</span><span 
class="cmtt-10">&#x00A0;declarations</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;);</span><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;,</span><span 
class="cmtt-10">&#x00A0;int);</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numHeads;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Generate</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;first</span><span 
class="cmtt-10">&#x00A0;seed</span><span 
class="cmtt-10">&#x00A0;value.</span><span 
class="cmtt-10">&#x00A0;A</span><span 
class="cmtt-10">&#x00A0;NULL</span><span 
class="cmtt-10">&#x00A0;arguments</span><span 
class="cmtt-10">&#x00A0;forces</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;time()</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;read</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;computer&#8217;s</span><span 
class="cmtt-10">&#x00A0;internal</span><span 
class="cmtt-10">&#x00A0;time</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;seconds.</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;The</span><span 
class="cmtt-10">&#x00A0;srand</span><span 
class="cmtt-10">&#x00A0;then</span><span 
class="cmtt-10">&#x00A0;uses</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;value</span><span 
class="cmtt-10">&#x00A0;to</span><span 
class="cmtt-10">&#x00A0;initialize</span><span 
class="cmtt-10">&#x00A0;rand()</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;srand(time(NULL));</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("How</span><span 
class="cmtt-10">&#x00A0;many</span><span 
class="cmtt-10">&#x00A0;tosses</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;fair</span><span 
class="cmtt-10">&#x00A0;coin</span><span 
class="cmtt-10">&#x00A0;shall</span><span 
class="cmtt-10">&#x00A0;we</span><span 
class="cmtt-10">&#x00A0;do?</span><span 
class="cmtt-10">&#x00A0;Please</span><span 
class="cmtt-10">&#x00A0;enter:</span><span 
class="cmtt-10">&#x00A0;");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;scanf("%d",</span><span 
class="cmtt-10">&#x00A0;&amp;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("Ok,</span><span 
class="cmtt-10">&#x00A0;you</span><span 
class="cmtt-10">&#x00A0;entered</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tosses,</span><span 
class="cmtt-10">&#x00A0;so</span><span 
class="cmtt-10">&#x00A0;we&#8217;d</span><span 
class="cmtt-10">&#x00A0;expect</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;%d</span><span 
class="cmtt-10">&#x00A0;tails\n",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numTosses,</span><span 
class="cmtt-10">&#x00A0;numTosses/2,</span><span 
class="cmtt-10">&#x00A0;numTosses/2);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;numHeads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;tossCoin(numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printStats(numHeads,</span><span 
class="cmtt-10">&#x00A0;numTosses);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;printStats</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">void</span><span 
class="cmtt-10">&#x00A0;printStats(int</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;tosses)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("The</span><span 
class="cmtt-10">&#x00A0;number</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;%d,</span><span 
class="cmtt-10">&#x00A0;tails</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;heads,</span><span 
class="cmtt-10">&#x00A0;(tosses-heads));</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /><span 
class="cmtt-10">/*</span><span 
class="cmtt-10">&#x00A0;tossCoin</span><span 
class="cmtt-10">&#x00A0;function</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;tossCoin(int</span><span 
class="cmtt-10">&#x00A0;tosses){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;heads</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i=1;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;tosses;</span><span 
class="cmtt-10">&#x00A0;i++)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if</span><span 
class="cmtt-10">&#x00A0;((1</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;(rand()%100))</span><span 
class="cmtt-10">&#x00A0;&#x003C;=</span><span 
class="cmtt-10">&#x00A0;50)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;heads++;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(heads);</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 409--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-11000"></a>Data structures</h3>
<!--l. 411--><p class="noindent" >C has no equivalent construct to the Java class. Instead, C provides two aggregate data structures  arrays
and structures.
<!--l. 414--><p class="noindent" >Arrays in C are not objects, nor strictly single variables. Instead, an arrays name is the name referring to
the first memory address of a contiguous block of memory of the requested length. Arrays may be declared
or defined wherever scalar variables are declared or defined  arrays may be either arrays of Cs base types
or user-defined types.
                                                                                  
                                                                                  
<!--l. 419--><p class="noindent" >There is no array keyword in C, and no bounds checking at run-time. C array subscripts commence at 0,
the highest valid subscript of <span 
class="cmbx-10">int </span>a[N] thus being N-1.
<!--l. 422--><p class="noindent" >One dimensional arrays defined with (for example) <span 
class="cmbx-10">int </span>score[20]; <br 
class="newline" />
<!--l. 424--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> declare score as array of 20 int <br 
class="newline" />
<div 
class="colorbox" id="colorbox13"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;score[20];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;20</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div>  </div>
<!--l. 441--><p class="noindent" >Multi-dimesntional arrays?
<!--l. 443--><p class="noindent" >Strictly speaking, C does not support multi-dimensional arrays. However, if all (one-dimensional) arrays in
C are considered as vectors, then multi-dimensional arrays are simply understood as &#8220;vectors of
vectors&#8221;.
<!--l. 445--><p class="noindent" ><span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">-&#x003E;</span></span></span> explain char str[10][20] <br 
class="newline" />
<!--l. 447--><p class="noindent" >declare str as array of 10 array of 20 char <br 
class="newline" />The number of elements of an array can be determined with :<br 
class="newline" />
<div 
class="colorbox" id="colorbox14"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;#define</span><span 
class="cmtt-10">&#x00A0;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;(sizeof(score)</span><span 
class="cmtt-10">&#x00A0;/</span><span 
class="cmtt-10">&#x00A0;sizeof(score[0]))</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for(i=0</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i&#x003C;NELEMENTS</span><span 
class="cmtt-10">&#x00A0;;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;total</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;score[i];</span><br /><br /></div></div>
<!--l. 464--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-12000"></a>User-defined C Structures</h3>
<!--l. 465--><p class="noindent" >Structures in C are aggregate datatypes consisting of fields or members of base types, or other
user-defined types. C structures may not include executable code, unlink methods in Java
classes.
<div 
class="colorbox" id="colorbox15"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;name[20];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;addr[80];</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;age;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;struct</span><span 
class="cmtt-10">&#x00A0;person</span><span 
class="cmtt-10">&#x00A0;p1,</span><span 
class="cmtt-10">&#x00A0;p2;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;ages;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;p1.age</span><span 
class="cmtt-10">&#x00A0;+</span><span 
class="cmtt-10">&#x00A0;p2.age;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;sum</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;their</span><span 
class="cmtt-10">&#x00A0;ages</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;if(strcmp(p1.name,</span><span 
class="cmtt-10">&#x00A0;p2.name)</span><span 
class="cmtt-10">&#x00A0;==</span><span 
class="cmtt-10">&#x00A0;0)</span><span 
class="cmtt-10">&#x00A0;...</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;do</span><span 
class="cmtt-10">&#x00A0;they</span><span 
class="cmtt-10">&#x00A0;have</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;same</span><span 
class="cmtt-10">&#x00A0;name?</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /></div></div>
<!--l. 490--><p class="noindent" >
<h3 class="likesectionHead"><a 
 id="x1-13000"></a>Character arrays and strings</h3>
<!--l. 492--><p class="noindent" >C provides no base type that is a string, though the C compiler accepts the use of double quoted character
string literals and does the obvious thing. A string in C is a sequence of characters (bytes) in contiguous
memory locations. The string is terminated by the sentinel value of the NULL character (zero byte). When
a C compiler detects a string literal in a program, it will allocate enough contiguous global
(read-only) memory to hold the characters of the string (including the NULL byte at the
end).
                                                                                  
                                                                                  
<!--l. 498--><p class="noindent" >C does not record the length of a string anywhere (as does Java). Instead, by convention, the length of a
string is defined as the number of characters from the beginning of the string (its starting address) up to,
but not including, the NULL byte. The length of &#8220;hello&#8221; is 5.
<!--l. 502--><p class="noindent" >Arrays of characters are typically used to store character strings. Notice that the parameter to
the following function does not indicate any expected (maximum) size, or &#8220;length&#8221;, of the
array.
<div 
class="colorbox" id="colorbox16"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;my_strlen(char</span><span 
class="cmtt-10">&#x00A0;str[])</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;len</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;while(</span><span 
class="cmtt-10">&#x00A0;str[i]</span><span 
class="cmtt-10">&#x00A0;!=</span><span 
class="cmtt-10">&#x00A0;&#8217;\0&#8217;</span><span 
class="cmtt-10">&#x00A0;)</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;len++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;i++;</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return(len);</span><br /><span 
class="cmtt-10">}</span><br /><br /></div></div>
<!--l. 525--><p class="noindent" >The snippet of code below include two strings that are compared. Literal strings are stored as ASCII codes
and the strng comparison strcmp compares each character&#8217;s ASCII code in making the comparison. If
<span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003C;</span><span 
class="cmtt-10">&#x00A0;0,</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s2</span></span></span> then the return value <span class="obeylines-h"><span class="verb"><span 
class="cmtt-10">&#x003E;</span><span 
class="cmtt-10">&#x00A0;0</span></span></span>, s1 = s2 then the return =
0.
<!--l. 527--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/string.c" > string.c </a>
<!--l. 529--><p class="noindent" >The contents of string.c looks like this:
<div 
class="colorbox" id="colorbox17"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;string.h&#x003E;</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main(){</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;char</span><span 
class="cmtt-10">&#x00A0;s1[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Beb",</span><span 
class="cmtt-10">&#x00A0;s2[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee",</span><span 
class="cmtt-10">&#x00A0;s3[]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;"Bee";</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;cmp;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;First</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s2</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s1,</span><span 
class="cmtt-10">&#x00A0;s2);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Second</span><span 
class="cmtt-10">&#x00A0;test</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;-</span><span 
class="cmtt-10">&#x00A0;s1</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s1);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s2</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s1,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;//</span><span 
class="cmtt-10">&#x00A0;Third</span><span 
class="cmtt-10">&#x00A0;test,</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s3</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;strcmp(s2,</span><span 
class="cmtt-10">&#x00A0;s3);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(%s)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;%d\n",</span><span 
class="cmtt-10">&#x00A0;s2,</span><span 
class="cmtt-10">&#x00A0;s3,</span><span 
class="cmtt-10">&#x00A0;cmp);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;mygcc</span><span 
class="cmtt-10">&#x00A0;-o</span><span 
class="cmtt-10">&#x00A0;string</span><span 
class="cmtt-10">&#x00A0;string.c</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><span 
class="cmtt-10">&#x00A0;./string</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;-3</span><br /><span 
class="cmtt-10">s2</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;&#x003E;</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Beb)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;s1</span><span 
class="cmtt-10">&#x00A0;(Bee)</span><span 
class="cmtt-10">&#x00A0;returned</span><span 
class="cmtt-10">&#x00A0;cmp</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;0</span><br /><span 
class="cmtt-10">[atc@Macintosh-10</span><span 
class="cmtt-10">&#x00A0;l6]$</span><br /><br /></div></div>
<!--l. 577--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array.c" > array.c </a>
<!--l. 579--><p class="noindent" >The contents of array.c looks like this:
<div 
class="colorbox" id="colorbox18"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;sets</span><span 
class="cmtt-10">&#x00A0;up</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;two</span><span 
class="cmtt-10">&#x00A0;demensional</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;and</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;contents</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;locaion.</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.7</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;405</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMROWS</span><span 
class="cmtt-10">&#x00A0;3</span><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMCOLS</span><span 
class="cmtt-10">&#x00A0;4</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><br /><span 
class="cmtt-10">{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;i,</span><span 
class="cmtt-10">&#x00A0;j;</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;val[NUMROWS][NUMCOLS]</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;{</span><span 
class="cmtt-10">&#x00A0;8,16,9,52,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;3,15,27,6,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;14,25,2,10</span><span 
class="cmtt-10">&#x00A0;};</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;explicitly</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[0][0],val[0][1],val[0][2],val[0][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[1][0],val[1][1],val[1][2],val[1][3]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d</span><span 
class="cmtt-10">&#x00A0;%2d",</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;val[2][0],val[2][1],val[2][2],val[2][3]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;loop</span><span 
class="cmtt-10">&#x00A0;through</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;print</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n\nDisplay</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop");</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(i</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;i</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMROWS;</span><span 
class="cmtt-10">&#x00A0;i++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;{</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><span 
class="cmtt-10">&#x00A0;/*</span><span 
class="cmtt-10">&#x00A0;start</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;new</span><span 
class="cmtt-10">&#x00A0;line</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;row</span><span 
class="cmtt-10">&#x00A0;*/</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;(j</span><span 
class="cmtt-10">&#x00A0;=</span><span 
class="cmtt-10">&#x00A0;0;</span><span 
class="cmtt-10">&#x00A0;j</span><span 
class="cmtt-10">&#x00A0;&#x003C;</span><span 
class="cmtt-10">&#x00A0;NUMCOLS;</span><span 
class="cmtt-10">&#x00A0;j++)</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("%2d</span><span 
class="cmtt-10">&#x00A0;",</span><span 
class="cmtt-10">&#x00A0;val[i][j]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;}</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf("\n");</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 642--><p class="noindent" >If we run array we get the following output
<div 
class="colorbox" id="colorbox19"><div class="BVerbatimInput"><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;by</span><span 
class="cmtt-10">&#x00A0;explicit</span><span 
class="cmtt-10">&#x00A0;element</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;10</span><br /><br /><span 
class="cmtt-10">Display</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;val</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;a</span><span 
class="cmtt-10">&#x00A0;nested</span><span 
class="cmtt-10">&#x00A0;for</span><span 
class="cmtt-10">&#x00A0;loop</span><br /><span 
class="cmtt-10">&#x00A0;8</span><span 
class="cmtt-10">&#x00A0;16</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;9</span><span 
class="cmtt-10">&#x00A0;52</span><br /><span 
class="cmtt-10">&#x00A0;3</span><span 
class="cmtt-10">&#x00A0;15</span><span 
class="cmtt-10">&#x00A0;27</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;6</span><br /><span 
class="cmtt-10">14</span><span 
class="cmtt-10">&#x00A0;25</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;2</span><span 
class="cmtt-10">&#x00A0;1</span><br /><br /></div></div>
<!--l. 667--><p class="noindent" >The next code snippet shows the address of an array and some of its elements. It importantly shows the
equivalence of two types of common notation in dealing with addresses and arrays, Run the code
below. Note that the <span 
class="cmbx-10">&amp; operator </span>is not used before the array name. Because an array is a
pointer constant equivalent to the address of the first storage location reserved for the array. the
expressions &#8220;numbers&#8221; and &amp;numbers[0] are equivalent. As an aside, if you wanted to pass the
address of an array in a function call you could replace &amp;numbers[0] with simply numbers.
*/
<!--l. 677--><p class="noindent" ><span 
class="cmbx-10">C code</span>:<a 
href="http://www.cs.dartmouth.edu/~campbell/cs50/array-address.c" > array-address.c </a>
<!--l. 679--><p class="noindent" >The contents of array-address.c looks like this:
<div 
class="colorbox" id="colorbox20"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">/*</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;File:</span><span 
class="cmtt-10">&#x00A0;array-address.c</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Description:</span><span 
class="cmtt-10">&#x00A0;This</span><span 
class="cmtt-10">&#x00A0;code</span><span 
class="cmtt-10">&#x00A0;prints</span><span 
class="cmtt-10">&#x00A0;out</span><span 
class="cmtt-10">&#x00A0;various</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;related</span><span 
class="cmtt-10">&#x00A0;items</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;an</span><span 
class="cmtt-10">&#x00A0;array.</span><span 
class="cmtt-10">&#x00A0;It</span><span 
class="cmtt-10">&#x00A0;also</span><span 
class="cmtt-10">&#x00A0;shows</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;equivalence</span><span 
class="cmtt-10">&#x00A0;between</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;plain</span><span 
class="cmtt-10">&#x00A0;name</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;this</span><span 
class="cmtt-10">&#x00A0;case</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;numbers&#8217;&#8217;</span><span 
class="cmtt-10">&#x00A0;and</span><br />                <span 
class="cmtt-10">the</span><span 
class="cmtt-10">&#x00A0;use</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&#8216;&#8216;&amp;(numbers[0])&#8217;&#8217;</span><br /><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;Revised</span><span 
class="cmtt-10">&#x00A0;from</span><span 
class="cmtt-10">&#x00A0;program</span><span 
class="cmtt-10">&#x00A0;8.10</span><span 
class="cmtt-10">&#x00A0;in</span><span 
class="cmtt-10">&#x00A0;Bronson</span><span 
class="cmtt-10">&#x00A0;page</span><span 
class="cmtt-10">&#x00A0;411</span><br /><br /><span 
class="cmtt-10">*/</span><br /><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdio.h&#x003E;</span><br /><span 
class="cmtt-10">#include</span><span 
class="cmtt-10">&#x00A0;&#x003C;stdlib.h&#x003E;</span><br /><br /><span 
class="cmtt-10">#define</span><span 
class="cmtt-10">&#x00A0;NUMELS</span><span 
class="cmtt-10">&#x00A0;20</span><br /><br /><span 
class="cmtt-10">int</span><span 
class="cmtt-10">&#x00A0;main()</span><span 
class="cmtt-10">&#x00A0;{</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;int</span><span 
class="cmtt-10">&#x00A0;numbers[NUMELS];</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[0]);</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%ld\n&#8217;&#8217;,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;sizeof(int));</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)&amp;numbers[5]);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;</span><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;%p\n&#8217;&#8217;,</span><span 
class="cmtt-10">&#x00A0;(void</span><span 
class="cmtt-10">&#x00A0;*)numbers);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;printf(&#8216;&#8216;Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!\n&#8217;&#8217;);</span><br /><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;return</span><span 
class="cmtt-10">&#x00A0;EXIT_SUCCESS;</span><br /><br /><span 
class="cmtt-10">}</span><br /><br /><br /></div></div>
<!--l. 731--><p class="noindent" >Let&#8217;s look at the output from array-address
<div 
class="colorbox" id="colorbox21"><div class="BVerbatimInput"><br /><br /><span 
class="cmtt-10">$</span><span 
class="cmtt-10">&#x00A0;./array-address</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;storage</span><span 
class="cmtt-10">&#x00A0;size</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;each</span><span 
class="cmtt-10">&#x00A0;array</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;4</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;element</span><span 
class="cmtt-10">&#x00A0;numbers[5]</span><span 
class="cmtt-10">&#x00A0;is</span><span 
class="cmtt-10">&#x00A0;:</span><span 
class="cmtt-10">&#x00A0;bffff894</span><br /><span 
class="cmtt-10">The</span><span 
class="cmtt-10">&#x00A0;starting</span><span 
class="cmtt-10">&#x00A0;address</span><span 
class="cmtt-10">&#x00A0;of</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;array,</span><br /><span 
class="cmtt-10">&#x00A0;</span><span 
class="cmtt-10">&#x00A0;using</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;numbers,</span><span 
class="cmtt-10">&#x00A0;is:</span><span 
class="cmtt-10">&#x00A0;bffff880</span><br /><span 
class="cmtt-10">Therefore,</span><span 
class="cmtt-10">&#x00A0;the</span><span 
class="cmtt-10">&#x00A0;notation</span><span 
class="cmtt-10">&#x00A0;&amp;numbers[0]</span><span 
class="cmtt-10">&#x00A0;and</span><span 
class="cmtt-10">&#x00A0;numbers</span><span 
class="cmtt-10">&#x00A0;are</span><span 
class="cmtt-10">&#x00A0;equivalent!</span><br /><br /></div></div>
 
</body></html> 

                                                                                  


